--------------------------------------------------------------------------------
Profile data file 'callgrind.out.77420' (creator: callgrind-3.15.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 106794964
Trigger: Program termination
Profiled target:  ./target/debug/examples/async_client (PID 77420, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir          
--------------------------------------------------------------------------------
648,835,479  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir          file:function
--------------------------------------------------------------------------------
96,516,672  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::add_mul_vvw [/home/cardinal/networking/target/debug/examples/async_client]
68,563,299  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/zip.rs:<core::iter::adapters::zip::Zip<A,B> as core::iter::adapters::zip::ZipImpl<A,B>>::next [/home/cardinal/networking/target/debug/examples/async_client]
68,198,400  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::mul_add_www [/home/cardinal/networking/target/debug/examples/async_client]
63,916,050  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::add_ww [/home/cardinal/networking/target/debug/examples/async_client]
42,992,556  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::offset [/home/cardinal/networking/target/debug/examples/async_client]
35,048,520  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::wrapping_add [/home/cardinal/networking/target/debug/examples/async_client]
31,191,512  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::add [/home/cardinal/networking/target/debug/examples/async_client]
24,484,278  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::slice::Iter<T> as core::iter::adapters::zip::TrustedRandomAccess>::get_unchecked [/home/cardinal/networking/target/debug/examples/async_client]
24,154,270  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::slice::IterMut<T> as core::iter::adapters::zip::TrustedRandomAccess>::get_unchecked [/home/cardinal/networking/target/debug/examples/async_client]
19,644,210  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::as_ptr [/home/cardinal/networking/target/debug/examples/async_client]
16,509,289  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/zip.rs:<core::iter::adapters::zip::Zip<A,B> as core::iter::traits::iterator::Iterator>::next [/home/cardinal/networking/target/debug/examples/async_client]
 7,298,071  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::montgomery [/home/cardinal/networking/target/debug/examples/async_client]
 6,997,209  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::iter::adapters::zip::Zip<A,B> as core::iter::adapters::zip::ZipImpl<A,B>>::new
 6,847,096  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::triple [/home/cardinal/networking/target/debug/examples/async_client]
 5,798,370  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::spilled [/home/cardinal/networking/target/debug/examples/async_client]
 5,474,994  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::triple_mut [/home/cardinal/networking/target/debug/examples/async_client]
 4,722,962  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::iter::traits::collect::Extend<<A as smallvec::Array>::Item>>::extend [/home/cardinal/networking/target/debug/examples/async_client]
 4,605,661  /build/glibc-YYA7BZ/glibc-2.31/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
 3,970,060  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::Deref>::deref [/home/cardinal/networking/target/debug/examples/async_client]
 3,940,023  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::IndexMut<I>>::index_mut [/home/cardinal/networking/target/debug/examples/async_client]
 3,541,625  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/cmp.rs:core::cmp::min_by [/home/cardinal/networking/target/debug/examples/async_client]
 3,361,248  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter [/home/cardinal/networking/target/debug/examples/async_client]
 3,325,595  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::slice_from_raw_parts_mut [/home/cardinal/networking/target/debug/examples/async_client]
 3,224,100  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter_mut [/home/cardinal/networking/target/debug/examples/async_client]
 3,198,921  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::index_mut [/home/cardinal/networking/target/debug/examples/async_client]
 3,124,935  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::zip [/home/cardinal/networking/target/debug/examples/async_client]
 3,116,540  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/zip.rs:<core::iter::adapters::zip::Zip<A,B> as core::iter::adapters::zip::ZipImpl<A,B>>::new [/home/cardinal/networking/target/debug/examples/async_client]
 3,098,655  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::DerefMut>::deref_mut [/home/cardinal/networking/target/debug/examples/async_client]
 2,763,033  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVecData<A>::heap [/home/cardinal/networking/target/debug/examples/async_client]
 2,655,939  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::slice_from_raw_parts [/home/cardinal/networking/target/debug/examples/async_client]
 2,644,480  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len [/home/cardinal/networking/target/debug/examples/async_client]
 2,617,299  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::get_unchecked_mut [/home/cardinal/networking/target/debug/examples/async_client]
 2,544,030  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::from_raw_parts_mut [/home/cardinal/networking/target/debug/examples/async_client]
 2,497,119  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut [/home/cardinal/networking/target/debug/examples/async_client]
 2,362,556  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index [/home/cardinal/networking/target/debug/examples/async_client]
 2,088,922  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::truncate [/home/cardinal/networking/target/debug/examples/async_client]
 2,070,590  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Take<I> as core::iter::traits::iterator::Iterator>::next [/home/cardinal/networking/target/debug/examples/async_client]
 2,043,030  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::from_raw_parts [/home/cardinal/networking/target/debug/examples/async_client]
 1,857,652  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/range.rs:core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next [/home/cardinal/networking/target/debug/examples/async_client]
 1,823,918  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/cmp.rs:core::cmp::impls::<impl core::cmp::Ord for usize>::cmp [/home/cardinal/networking/target/debug/examples/async_client]
 1,813,527  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<usize as core::slice::SliceIndex<[T]>>::index [/home/cardinal/networking/target/debug/examples/async_client]
 1,559,569  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/intrinsics.rs:core::intrinsics::copy_nonoverlapping [/home/cardinal/networking/target/debug/examples/async_client]
 1,552,975  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::swap_nonoverlapping_one [/home/cardinal/networking/target/debug/examples/async_client]
 1,528,028  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter [/home/cardinal/networking/target/debug/examples/async_client]
 1,516,563  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::Index<I> for [T]>::index [/home/cardinal/networking/target/debug/examples/async_client]
 1,506,411  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVecData<A>::heap_mut [/home/cardinal/networking/target/debug/examples/async_client]
 1,404,931  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::is_null [/home/cardinal/networking/target/debug/examples/async_client]
 1,348,634  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SetLenOnDrop::increment_len [/home/cardinal/networking/target/debug/examples/async_client]
 1,287,378  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::new_unchecked [/home/cardinal/networking/target/debug/examples/async_client]
 1,286,186  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/const_ptr.rs:core::ptr::const_ptr::<impl *const T>::is_null [/home/cardinal/networking/target/debug/examples/async_client]
 1,232,916  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::as_mut_ptr [/home/cardinal/networking/target/debug/examples/async_client]
 1,204,947  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/const_ptr.rs:core::ptr::const_ptr::<impl *const T>::offset [/home/cardinal/networking/target/debug/examples/async_client]
 1,074,230  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/zip.rs:core::iter::adapters::zip::Zip<A,B>::new [/home/cardinal/networking/target/debug/examples/async_client]
 1,045,672  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/sources.rs:<core::iter::sources::Repeat<A> as core::iter::traits::iterator::Iterator>::next [/home/cardinal/networking/target/debug/examples/async_client]
 1,010,847  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/function.rs:core::ops::function::FnOnce::call_once [/home/cardinal/networking/target/debug/examples/async_client]
   997,476  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::sub_vv [/home/cardinal/networking/target/debug/examples/async_client]
   996,371  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::read [/home/cardinal/networking/target/debug/examples/async_client]
   977,665  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SetLenOnDrop::get [/home/cardinal/networking/target/debug/examples/async_client]
   943,831  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::write [/home/cardinal/networking/target/debug/examples/async_client]
   909,184  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<usize as core::slice::SliceIndex<[T]>>::index_mut [/home/cardinal/networking/target/debug/examples/async_client]
   846,576  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/const_ptr.rs:core::ptr::const_ptr::<impl *const T>::add [/home/cardinal/networking/target/debug/examples/async_client]
   807,344  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/cmp.rs:core::cmp::Ord::min [/home/cardinal/networking/target/debug/examples/async_client]
   807,344  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/cmp.rs:core::cmp::min [/home/cardinal/networking/target/debug/examples/async_client]
   790,292  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<[T; 4] as smallvec::Array>::size [/home/cardinal/networking/target/debug/examples/async_client]
   785,017  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Enumerate<I> as core::iter::traits::iterator::Iterator>::next [/home/cardinal/networking/target/debug/examples/async_client]
   741,020  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/mac.rs:num_bigint_dig::algorithms::mac::mac_with_carry [/home/cardinal/networking/target/debug/examples/async_client]
   645,684  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::as_ptr [/home/cardinal/networking/target/debug/examples/async_client]
   565,231  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/sub.rs:num_bigint_dig::algorithms::sub::sbb [/home/cardinal/networking/target/debug/examples/async_client]
   562,020  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/cmp.rs:core::cmp::impls::<impl core::cmp::PartialOrd for usize>::lt [/home/cardinal/networking/target/debug/examples/async_client]
   535,131  /cargo/registry/src/github.com-1ecc6299db9ec823/compiler_builtins-0.1.31/src/int/udiv.rs:compiler_builtins::int::udiv::__udivmodti4
   533,301  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/mem/mod.rs:core::mem::replace [/home/cardinal/networking/target/debug/examples/async_client]
   530,582  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::slice::Iter<T> as core::iter::traits::iterator::Iterator>::next [/home/cardinal/networking/target/debug/examples/async_client]
   527,550  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl usize>::unchecked_add [/home/cardinal/networking/target/debug/examples/async_client]
   500,045  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/clone.rs:core::clone::impls::<impl core::clone::Clone for u64>::clone [/home/cardinal/networking/target/debug/examples/async_client]
   486,546  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::ok_or [/home/cardinal/networking/target/debug/examples/async_client]
   474,760  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::wrapping_mul [/home/cardinal/networking/target/debug/examples/async_client]
   451,036  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/mac.rs:num_bigint_dig::algorithms::mac::mac_digit [/home/cardinal/networking/target/debug/examples/async_client]
   439,364  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::swap_nonoverlapping_bytes [/home/cardinal/networking/target/debug/examples/async_client]
   422,040  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/range.rs:<usize as core::iter::range::Step>::forward_unchecked [/home/cardinal/networking/target/debug/examples/async_client]
   407,424  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/mem/mod.rs:core::slice::<impl [T]>::iter
   390,800  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/mem/mod.rs:core::slice::<impl [T]>::iter_mut
   388,734  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/mem/mod.rs:<core::iter::adapters::zip::Zip<A,B> as core::iter::adapters::zip::ZipImpl<A,B>>::new
   385,800  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::slice::IterMut<T> as core::iter::adapters::zip::TrustedRandomAccess>::may_have_side_effect [/home/cardinal/networking/target/debug/examples/async_client]
   354,735  ???:0x00000000001360f0 [???]
   322,764  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/mem/mod.rs:core::mem::swap [/home/cardinal/networking/target/debug/examples/async_client]
   312,877  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/sub.rs:num_bigint_dig::algorithms::sub::sub2 [/home/cardinal/networking/target/debug/examples/async_client]
   268,970  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/mem/mod.rs:core::ptr::swap_nonoverlapping_one
   266,795  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/clone.rs:core::clone::impls::<impl core::clone::Clone for usize>::clone [/home/cardinal/networking/target/debug/examples/async_client]
   258,832  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor [/home/cardinal/networking/target/debug/examples/async_client]
   252,120  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::split_at_mut [/home/cardinal/networking/target/debug/examples/async_client]
   247,600  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::wrapping_sub [/home/cardinal/networking/target/debug/examples/async_client]
   220,761  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::push [/home/cardinal/networking/target/debug/examples/async_client]
   212,541  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/macros/mod.rs:smallvec::SmallVecData<A>::heap
   195,240  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs2State<T> as crypto::aessafe::Gf2Ops>::mul [/home/cardinal/networking/target/debug/examples/async_client]
   192,477  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:compiler_builtins::int::udiv::__udivmodti4
   190,960  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh [/home/cardinal/networking/target/debug/examples/async_client]
   190,960  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh [/home/cardinal/networking/target/debug/examples/async_client]
   188,416  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/internal_macros.rs:<&u64 as core::ops::bit::Not>::not [/home/cardinal/networking/target/debug/examples/async_client]
   187,602  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::slice::Iter<T> as core::iter::traits::double_ended::DoubleEndedIterator>::next_back [/home/cardinal/networking/target/debug/examples/async_client]
   183,022  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/arith.rs:<usize as core::ops::arith::AddAssign>::add_assign [/home/cardinal/networking/target/debug/examples/async_client]
   167,379  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/macros/mod.rs:smallvec::SmallVecData<A>::heap_mut
   164,716  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::resize [/home/cardinal/networking/target/debug/examples/async_client]
   162,690  /build/glibc-YYA7BZ/glibc-2.31/malloc/malloc.c:_int_malloc [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
   153,180  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len [/home/cardinal/networking/target/debug/examples/async_client]
   147,008  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:<core::option::Option<T> as core::ops::try::Try>::into_result [/home/cardinal/networking/target/debug/examples/async_client]
   146,860  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:alloc::vec::Vec<T>::push [/home/cardinal/networking/target/debug/examples/async_client]
   145,181  /build/glibc-YYA7BZ/glibc-2.31/malloc/malloc.c:_int_free [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
   141,312  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u64 as core::ops::bit::Not>::not [/home/cardinal/networking/target/debug/examples/async_client]
   140,754  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/gcd.rs:num_bigint_dig::algorithms::gcd::lehmer_simulate [/home/cardinal/networking/target/debug/examples/async_client]
   129,792  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::clone::Clone>::clone [/home/cardinal/networking/target/debug/examples/async_client]
   120,271  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Take<I> as core::iter::traits::iterator::Iterator>::size_hint [/home/cardinal/networking/target/debug/examples/async_client]
   111,100  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::slice::IterMut<T> as core::iter::traits::iterator::Iterator>::next [/home/cardinal/networking/target/debug/examples/async_client]
   110,885  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::try_reserve [/home/cardinal/networking/target/debug/examples/async_client]
   108,900  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::split [/home/cardinal/networking/target/debug/examples/async_client]
   105,984  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/internal_macros.rs:<&u64 as core::ops::bit::BitAnd<u64>>::bitand [/home/cardinal/networking/target/debug/examples/async_client]
   105,984  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/internal_macros.rs:<&u64 as core::ops::bit::BitOr<u64>>::bitor [/home/cardinal/networking/target/debug/examples/async_client]
   103,774  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/add.rs:num_bigint_dig::algorithms::add::adc [/home/cardinal/networking/target/debug/examples/async_client]
   103,050  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::xor [/home/cardinal/networking/target/debug/examples/async_client]
   101,343  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::index [/home/cardinal/networking/target/debug/examples/async_client]
    97,992  /build/glibc-YYA7BZ/glibc-2.31/elf/dl-lookup.c:do_lookup_x [/usr/lib/x86_64-linux-gnu/ld-2.31.so]
    94,864  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand [/home/cardinal/networking/target/debug/examples/async_client]
    94,230  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::get_unchecked [/home/cardinal/networking/target/debug/examples/async_client]
    92,160  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_4x4_with_u16::pb [/home/cardinal/networking/target/debug/examples/async_client]
    90,525  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::normalize [/home/cardinal/networking/target/debug/examples/async_client]
    89,837  /build/glibc-YYA7BZ/glibc-2.31/elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
    87,040  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_4x4_with_u16::pb [/home/cardinal/networking/target/debug/examples/async_client]
    84,546  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::pop [/home/cardinal/networking/target/debug/examples/async_client]
    83,676  /build/glibc-YYA7BZ/glibc-2.31/string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
    82,864  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::last [/home/cardinal/networking/target/debug/examples/async_client]
    82,432  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u64 as core::ops::bit::BitAnd>::bitand [/home/cardinal/networking/target/debug/examples/async_client]
    82,432  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u64 as core::ops::bit::BitOr>::bitor [/home/cardinal/networking/target/debug/examples/async_client]
    79,755  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::swap_with_slice [/home/cardinal/networking/target/debug/examples/async_client]
    79,650  /build/glibc-YYA7BZ/glibc-2.31/malloc/malloc.c:calloc [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
    78,120  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/double_ended.rs:core::iter::traits::double_ended::DoubleEndedIterator::rfold [/home/cardinal/networking/target/debug/examples/async_client]
    77,538  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::from_bitwise_digits_le::{{closure}} [/home/cardinal/networking/target/debug/examples/async_client]
    77,268  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/raw_vec.rs:alloc::raw_vec::RawVec<T,A>::allocate_in [/home/cardinal/networking/target/debug/examples/async_client]
    75,928  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/add.rs:num_bigint_dig::algorithms::add::__add2 [/home/cardinal/networking/target/debug/examples/async_client]
    75,900  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs4State<T> as crypto::aessafe::Gf4Ops>::mul [/home/cardinal/networking/target/debug/examples/async_client]
    75,617  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::slice::Iter<T> as core::iter::traits::iterator::Iterator>::all [/home/cardinal/networking/target/debug/examples/async_client]
    75,602  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::to_bitwise_digits_le [/home/cardinal/networking/target/debug/examples/async_client]
    74,066  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/cmp.rs:num_bigint_dig::algorithms::cmp::cmp_slice [/home/cardinal/networking/target/debug/examples/async_client]
    73,511  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/div.rs:num_bigint_dig::algorithms::div::div_rem [/home/cardinal/networking/target/debug/examples/async_client]
    71,692  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/raw_vec.rs:alloc::raw_vec::RawVec<T,A>::current_memory [/home/cardinal/networking/target/debug/examples/async_client]
    71,680  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.71/src/unix/linux_like/linux/mod.rs:libc::unix::linux_like::linux::CPU_ISSET
    71,449  /build/glibc-YYA7BZ/glibc-2.31/elf/dl-addr.c:_dl_addr [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
    69,975  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/alloc/layout.rs:core::alloc::layout::Layout::from_size_align_unchecked [/home/cardinal/networking/target/debug/examples/async_client]
    69,250  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:<core::option::Option<T> as core::cmp::PartialEq>::ne [/home/cardinal/networking/target/debug/examples/async_client]
    68,274  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/mac.rs:num_bigint_dig::algorithms::mac::long [/home/cardinal/networking/target/debug/examples/async_client]
    67,897  /build/glibc-YYA7BZ/glibc-2.31/stdio-common/vfscanf-internal.c:__vfscanf_internal [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
    67,194  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::monty_modpow [/home/cardinal/networking/target/debug/examples/async_client]
    66,220  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:alloc::vec::Vec<T>::as_mut_ptr [/home/cardinal/networking/target/debug/examples/async_client]
    64,160  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs4State<T>::split [/home/cardinal/networking/target/debug/examples/async_client]
    63,760  /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/mul.rs:num_bigint_dig::algorithms::mul::mul3 [/home/cardinal/networking/target/debug/examples/async_client]
    63,460  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl usize>::wrapping_sub [/home/cardinal/networking/target/debug/examples/async_client]
    63,216  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/alloc/layout.rs:core::alloc::layout::Layout::repeat [/home/cardinal/networking/target/debug/examples/async_client]

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs
--------------------------------------------------------------------------------
Ir      

-- line 49 ----------------------------------------
      .                  self.2.wrapping_sub(rhs.2),
      .                  self.3.wrapping_sub(rhs.3))
      .          }
      .      }
      .  
      .      impl BitAnd for u32x4 {
      .          type Output = u32x4;
      .  
  6,776          fn bitand(self, rhs: u32x4) -> u32x4 {
 81,312              u32x4(self.0 & rhs.0, self.1 & rhs.1, self.2 & rhs.2, self.3 & rhs.3)
  6,776          }
      .      }
      .  
      .      impl BitOr for u32x4 {
      .          type Output = u32x4;
      .  
  2,464          fn bitor(self, rhs: u32x4) -> u32x4 {
 29,568              u32x4(self.0 | rhs.0, self.1 | rhs.1, self.2 | rhs.2, self.3 | rhs.3)
  2,464          }
      .      }
      .  
      .      impl BitXor for u32x4 {
      .          type Output = u32x4;
      .  
 18,488          fn bitxor(self, rhs: u32x4) -> u32x4 {
221,856              u32x4(self.0 ^ rhs.0, self.1 ^ rhs.1, self.2 ^ rhs.2, self.3 ^ rhs.3)
 18,488          }
      .      }
      .  
      .      impl Shl<usize> for u32x4 {
      .          type Output = u32x4;
      .  
      .          fn shl(self, amt: usize) -> u32x4 {
      .              u32x4(self.0 << amt, self.1 << amt, self.2 << amt, self.3 << amt)
      .          }
-- line 83 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/sub.rs
--------------------------------------------------------------------------------
Ir      

-- line 6 ----------------------------------------
      .  
      .  use crate::algorithms::cmp_slice;
      .  use crate::big_digit::{BigDigit, SignedDoubleBigDigit, BITS};
      .  use crate::bigint::Sign::{self, *};
      .  use crate::{BigUint, VEC_SIZE};
      .  
      .  /// Subtract with borrow:
      .  #[inline]
 39,805  pub fn sbb(a: BigDigit, b: BigDigit, acc: &mut SignedDoubleBigDigit) -> BigDigit {
183,103      *acc += a as SignedDoubleBigDigit;
175,142      *acc -= b as SignedDoubleBigDigit;
 15,922      let lo = *acc as BigDigit;
 79,610      *acc >>= BITS;
      .      lo
 23,883  }
      .  
  2,670  pub fn sub2(a: &mut [BigDigit], b: &[BigDigit]) {
  3,204      let mut borrow = 0;
      .  
  3,738      let len = cmp::min(a.len(), b.len());
 42,636  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/cmp.rs:core::cmp::min (534x)
  8,544  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (1,068x)
  6,942      let (a_lo, a_hi) = a.split_at_mut(len);
 72,624  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::split_at_mut (534x)
 12,282      let (b_lo, b_hi) = b.split_at(len);
196,512  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::split_at (534x)
      .  
191,224      for (a, b) in a_lo.iter_mut().zip(b_lo) {
991,419  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/zip.rs:<core::iter::adapters::zip::Zip<A,B> as core::iter::traits::iterator::Iterator>::next (8,425x)
185,298  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::zip (534x)
 46,458  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter_mut (534x)
 11,214  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (534x)
  6,942  => ???:0x00000000001360f0 (534x)
 55,237          *a = sbb(*a, *b, &mut borrow);
560,261  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/sub.rs:num_bigint_dig::algorithms::sub::sbb (7,891x)
      .      }
      .  
  3,138      if borrow != 0 {
  1,386          for a in a_hi {
  7,788  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::slice::IterMut<T> as core::iter::traits::iterator::Iterator>::next (66x)
  6,402  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::iter::traits::collect::IntoIterator for &mut [T]>::into_iter (66x)
    462              *a = sbb(*a, 0, &mut borrow);
  4,686  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/sub.rs:num_bigint_dig::algorithms::sub::sbb (66x)
    264              if borrow == 0 {
     66                  break;
      .              }
      .          }
      .      }
      .  
      .      // note: we're _required_ to fail on underflow
  2,670      assert!(
  9,612          borrow == 0 && b_hi.iter().all(|x| *x == 0),
 46,992  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::slice::Iter<T> as core::iter::traits::iterator::Iterator>::all (534x)
 46,458  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter (534x)
      .          "Cannot subtract b from a because b is larger than a."
      .      );
  1,068  }
      .  
      .  // Only for the Sub impl. `a` and `b` must have same length.
      .  #[inline]
     24  pub fn __sub2rev(a: &[BigDigit], b: &mut [BigDigit]) -> BigDigit {
     56      debug_assert!(b.len() == a.len());
     64  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (8x)
      .  
     16      let mut borrow = 0;
      .  
    208      for (ai, bi) in a.iter().zip(b) {
  1,388  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::zip (4x)
    648  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/zip.rs:<core::iter::adapters::zip::Zip<A,B> as core::iter::traits::iterator::Iterator>::next (8x)
    348  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter (4x)
     84  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (4x)
     52  => ???:0x00000000001360f0 (4x)
     28          *bi = sbb(*ai, *bi, &mut borrow);
    284  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/sub.rs:num_bigint_dig::algorithms::sub::sbb (4x)
      .      }
      .  
      4      borrow as BigDigit
      8  }
      .  
      .  pub fn sub2rev(a: &[BigDigit], b: &mut [BigDigit]) {
      .      debug_assert!(b.len() >= a.len());
      .  
      .      let len = cmp::min(a.len(), b.len());
      .      let (a_lo, a_hi) = a.split_at(len);
      .      let (b_lo, b_hi) = b.split_at_mut(len);
      .  
-- line 69 ----------------------------------------

 66,704  <counts for unidentified lines in /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/sub.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs
--------------------------------------------------------------------------------
Ir      

-- line 237 ----------------------------------------
      .  macro_rules! define_aes_impl_x8(
      .      (
      .          $name:ident,
      .          $mode:ident,
      .          $rounds:expr,
      .          $key_size:expr
      .      ) => (
      .          impl $name {
     10              pub fn new(key: &[u8]) -> $name {
     22                  let mut a =  $name {
    165  => ???:0x00000000001360f0 (1x)
     12                      sk: [
     64                          Bs8State(
      .                              U32X4_0,
      .                              U32X4_0,
      .                              U32X4_0,
      .                              U32X4_0,
      .                              U32X4_0,
      .                              U32X4_0,
      .                              U32X4_0,
      .                              U32X4_0);
      .                          ($rounds + 1)]
      .                  };
     18                  let mut tmp = [[0u32; 4]; ($rounds + 1)];
     13  => ???:0x0000000000136118 (1x)
     15                  create_round_keys(key, KeyType::$mode, &mut tmp);
207,455  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::create_round_keys (1x)
    366                  for i in 0..$rounds + 1 {
  2,142  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/range.rs:core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next (12x)
      7  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (1x)
    352                      a.sk[i] = bit_slice_fill_4x4_with_u32x4(
288,805  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_fill_4x4_with_u32x4 (11x)
    341  => ???:0x00000000001360f0 (11x)
    220                          tmp[i][0],
    220                          tmp[i][1],
    220                          tmp[i][2],
    198                          tmp[i][3]);
      .                  }
      .                  a
      4              }
      .          }
      .      )
      .  );
      .  
      .  macro_rules! define_aes_enc_x8(
      .      (
      .          $name:ident,
      .          $rounds:expr
      .      ) => (
      .          impl BlockEncryptorX8 for $name {
      .              fn block_size(&self) -> usize { 16 }
     60              fn encrypt_block_x8(&self, input: &[u8], output: &mut [u8]) {
     50                  let bs = bit_slice_1x128_with_u32x4(input);
146,640  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_1x128_with_u32x4 (10x)
     50                  let bs2 = encrypt_core(&bs, &self.sk);
1,231,430  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::encrypt_core (10x)
    120                  un_bit_slice_1x128_with_u32x4(bs2, output);
144,740  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_1x128_with_u32x4 (10x)
    310  => ???:0x00000000001360f0 (10x)
     20              }
      .          }
      .      )
      .  );
      .  
      .  macro_rules! define_aes_dec_x8(
      .      (
      .          $name:ident,
      .          $rounds:expr
      .      ) => (
      .          impl BlockDecryptorX8 for $name {
      .              fn block_size(&self) -> usize { 16 }
      6              fn decrypt_block_x8(&self, input: &[u8], output: &mut [u8]) {
      5                  let bs = bit_slice_1x128_with_u32x4(input);
 14,664  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_1x128_with_u32x4 (1x)
      5                  let bs2 = decrypt_core(&bs, &self.sk);
136,264  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::decrypt_core (1x)
     12                  un_bit_slice_1x128_with_u32x4(bs2, output);
 14,474  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_1x128_with_u32x4 (1x)
     31  => ???:0x00000000001360f0 (1x)
      2              }
      .          }
      .      )
      .  );
      .  
      .  define_aes_struct_x8!(AesSafe128EncryptorX8, 10);
      .  define_aes_struct_x8!(AesSafe128DecryptorX8, 10);
      .  define_aes_impl_x8!(AesSafe128EncryptorX8, Encryption, 10, 16);
      .  define_aes_impl_x8!(AesSafe128DecryptorX8, Decryption, 10, 16);
-- line 309 ----------------------------------------
-- line 319 ----------------------------------------
      .  
      .  define_aes_struct_x8!(AesSafe256EncryptorX8, 14);
      .  define_aes_struct_x8!(AesSafe256DecryptorX8, 14);
      .  define_aes_impl_x8!(AesSafe256EncryptorX8, Encryption, 14, 32);
      .  define_aes_impl_x8!(AesSafe256DecryptorX8, Decryption, 14, 32);
      .  define_aes_enc_x8!(AesSafe256EncryptorX8, 14);
      .  define_aes_dec_x8!(AesSafe256DecryptorX8, 14);
      .  
    216  fn ffmulx(x: u32) -> u32 {
    108      let m1: u32 = 0x80808080;
    108      let m2: u32 = 0x7f7f7f7f;
    108      let m3: u32 = 0x0000001b;
  1,620      ((x & m2) << 1) ^ (((x & m1) >> 7) * m3)
    216  }
      .  
    108  fn inv_mcol(x: u32) -> u32 {
    108      let f2 = ffmulx(x);
    936  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::ffmulx (36x)
    108      let f4 = ffmulx(f2);
    936  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::ffmulx (36x)
    108      let f8 = ffmulx(f4);
    936  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::ffmulx (36x)
    144      let f9 = x ^ f8;
      .  
    900      f2 ^ f4 ^ f8 ^ (f2 ^ f9).rotate_right(8) ^ (f4 ^ f9).rotate_right(16) ^ f9.rotate_right(24)
  1,188  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u32>::rotate_right (108x)
     72  }
      .  
     40  fn sub_word(x: u32) -> u32 {
    160      let bs = bit_slice_4x1_with_u16(x).sub_bytes();
125,060  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_4x1_with_u16 (20x)
 93,740  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::sub_bytes (20x)
     60      un_bit_slice_4x1_with_u16(&bs)
132,920  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_4x1_with_u16 (20x)
     40  }
      .  
      .  enum KeyType {
      .      Encryption,
      .      Decryption
      .  }
      .  
      .  // This array is not accessed in any key-dependant way, so there are no timing problems inherent in
      .  // using it.
      .  static RCON: [u32; 10] = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
      .  
      .  // The round keys are created without bit-slicing the key data. The individual implementations bit
      .  // slice the round keys returned from this function. This function, and the few functions above, are
      .  // derived from the BouncyCastle AES implementation.
     22  fn create_round_keys(key: &[u8], key_type: KeyType, round_keys: &mut [[u32; 4]]) {
     14      let (key_words, rounds) = match key.len() {
     16  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (2x)
      8          16 => (4, 10),
      .          24 => (6, 12),
      .          32 => (8, 14),
      .          _ => panic!("Invalid AES key size.")
      .      };
      .  
      .      // The key is copied directly into the first few round keys
     10      let mut j = 0;
    182      for i in (0..key.len()).step_up(4) {
    476  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs:<crypto::step_by::StepUp<T> as core::iter::traits::iterator::Iterator>::next (10x)
     16  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (2x)
     16  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (2x)
     20  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs:<core::ops::range::Range<T> as crypto::step_by::RangeExt<T>>::step_up (2x)
    184          round_keys[j / 4][j % 4] =
     80              (key[i] as u32) |
    104              ((key[i+1] as u32) << 8) |
    104              ((key[i+2] as u32) << 16) |
    104              ((key[i+3] as u32) << 24);
     56          j += 1;
      .      };
      .  
      .      // Calculate the rest of the round keys
  1,262      for i in key_words..(rounds + 1) * 4 {
 15,420  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/range.rs:core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next (82x)
     14  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (2x)
  2,560          let mut tmp = round_keys[(i - 1) / 4][(i - 1) % 4];
    880          if (i % key_words) == 0 {
    560              tmp = sub_word(tmp.rotate_right(8)) ^ RCON[(i / key_words) - 1];
352,040  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::sub_word (20x)
    220  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u32>::rotate_right (20x)
    540          } else if (key_words == 8) && ((i % key_words) == 4) {
      .              // This is only necessary for AES-256 keys
      .              tmp = sub_word(tmp);
      .          }
  4,240          round_keys[i / 4][i % 4] = round_keys[(i - key_words) / 4][(i - key_words) % 4] ^ tmp;
      .      }
      .  
      .      // Decryption round keys require extra processing
      2      match key_type {
     10          KeyType::Decryption => {
    154              for j in 1..rounds {
  1,758  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/range.rs:core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next (10x)
      7  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (1x)
    783                  for i in 0..4 {
  7,182  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/range.rs:core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next (45x)
     63  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (9x)
  1,080                      round_keys[j][i] = inv_mcol(round_keys[j][i]);
  5,904  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::inv_mcol (36x)
      .                  }
      .              }
      .          },
      .          KeyType::Encryption => { }
      .      }
      4  }
      .  
      .  // This trait defines all of the operations needed for a type to be processed as part of an AES
      .  // encryption or decryption operation.
      .  trait AesOps {
      .      fn sub_bytes(self) -> Self;
      .      fn inv_sub_bytes(self) -> Self;
      .      fn shift_rows(self) -> Self;
      .      fn inv_shift_rows(self) -> Self;
      .      fn mix_columns(self) -> Self;
      .      fn inv_mix_columns(self) -> Self;
      .      fn add_round_key(self, rk: &Self) -> Self;
      .  }
      .  
     70  fn encrypt_core<S: AesOps + Copy>(state: &S, sk: &[S]) -> S {
      .      // Round 0 - add round key
    190      let mut tmp = state.add_round_key(&sk[0]);
  4,040  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::add_round_key (10x)
    310  => ???:0x00000000001360f0 (10x)
      .  
      .      // Remaining rounds (except last round)
  1,610      for i in 1..sk.len() - 1 {
 17,580  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/range.rs:core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next (100x)
     80  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (10x)
     70  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (10x)
  1,620          tmp = tmp.sub_bytes();
836,460  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::sub_bytes (90x)
  5,580  => ???:0x00000000001360f0 (180x)
  1,620          tmp = tmp.shift_rows();
 51,930  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::shift_rows (90x)
  5,580  => ???:0x00000000001360f0 (180x)
  1,620          tmp = tmp.mix_columns();
147,420  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::mix_columns (90x)
  5,580  => ???:0x00000000001360f0 (180x)
  2,160          tmp = tmp.add_round_key(&sk[i]);
 36,360  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::add_round_key (90x)
  5,580  => ???:0x00000000001360f0 (180x)
      .      }
      .  
      .      // Last round
    190      tmp = tmp.sub_bytes();
 92,940  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::sub_bytes (10x)
    620  => ???:0x00000000001360f0 (20x)
    180      tmp = tmp.shift_rows();
  5,770  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::shift_rows (10x)
    620  => ???:0x00000000001360f0 (20x)
    320      tmp = tmp.add_round_key(&sk[sk.len() - 1]);
  4,040  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::add_round_key (10x)
    620  => ???:0x00000000001360f0 (20x)
     80  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (10x)
      .  
      .      tmp
     20  }
      .  
      5  fn decrypt_core<S: AesOps + Copy>(state: &S, sk: &[S]) -> S {
      .      // Round 0 - add round key
     29      let mut tmp = state.add_round_key(&sk[sk.len() - 1]);
    404  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::add_round_key (1x)
     31  => ???:0x00000000001360f0 (1x)
      8  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (1x)
      .  
      .      // Remaining rounds (except last round)
    161      for i in 1..sk.len() - 1 {
  1,758  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/range.rs:core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next (10x)
      8  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (1x)
      7  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (1x)
    162          tmp = tmp.inv_sub_bytes();
 83,979  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::inv_sub_bytes (9x)
    558  => ???:0x00000000001360f0 (18x)
    162          tmp = tmp.inv_shift_rows();
  5,193  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::inv_shift_rows (9x)
    558  => ???:0x00000000001360f0 (18x)
    162          tmp = tmp.inv_mix_columns();
 27,270  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::inv_mix_columns (9x)
    558  => ???:0x00000000001360f0 (18x)
    324          tmp = tmp.add_round_key(&sk[sk.len() - 1 - i]);
  3,636  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::add_round_key (9x)
    558  => ???:0x00000000001360f0 (18x)
     72  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (9x)
      .      }
      .  
      .      // Last round
     19      tmp = tmp.inv_sub_bytes();
  9,331  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::inv_sub_bytes (1x)
     62  => ???:0x00000000001360f0 (2x)
     17      tmp = tmp.inv_shift_rows();
    577  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::inv_shift_rows (1x)
     62  => ???:0x00000000001360f0 (2x)
     22      tmp = tmp.add_round_key(&sk[0]);
    404  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::AesOps>::add_round_key (1x)
     62  => ???:0x00000000001360f0 (2x)
      .  
      .      tmp
      2  }
      .  
      .  #[derive(Clone, Copy)]
      .  struct Bs8State<T>(T, T, T, T, T, T, T, T);
      .  
      .  impl <T: Copy> Bs8State<T> {
    300      fn split(self) -> (Bs4State<T>, Bs4State<T>) {
  3,840          let Bs8State(x0, x1, x2, x3, x4, x5, x6, x7) = self;
  9,260          (Bs4State(x0, x1, x2, x3), Bs4State(x4, x5, x6, x7))
  2,860  => ???:0x00000000001360f0 (220x)
    300      }
      .  }
      .  
      .  impl <T: BitXor<Output = T> + Copy> Bs8State<T> {
    242      fn xor(self, rhs: Bs8State<T>) -> Bs8State<T> {
  3,872          let Bs8State(a0, a1, a2, a3, a4, a5, a6, a7) = self;
  3,872          let Bs8State(b0, b1, b2, b3, b4, b5, b6, b7) = rhs;
 15,972          Bs8State(a0 ^ b0, a1 ^ b1, a2 ^ b2, a3 ^ b3, a4 ^ b4, a5 ^ b5, a6 ^ b6, a7 ^ b7)
 13,552  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (968x)
    242      }
      .  
      .      // We need to be able to convert a Bs8State to and from a polynomial basis and a normal
      .      // basis. That transformation could be done via pseudocode that roughly looks like the
      .      // following:
      .      //
      .      // for x in 0..8 {
      .      //     for y in 0..8 {
      .      //         result.x ^= input.y & MATRIX[7 - y][x]
-- line 479 ----------------------------------------
-- line 537 ----------------------------------------
      .      // implemented independently directly in fully unrolled form with the 0 elements
      .      // removed.
      .      //
      .      // As an optimization, elements that are XORed together multiple times are
      .      // XORed just once and then used multiple times. I wrote a simple program that
      .      // greedily looked for terms to combine to create the implementations below.
      .      // It is likely that this could be optimized more.
      .  
    360      fn change_basis_a2x(&self) -> Bs8State<T> {
  1,720          let t06 = self.6 ^ self.0;
  1,400  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (100x)
    140  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (20x)
  1,320          let t056 = self.5 ^ t06;
  1,400  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (100x)
    140  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (20x)
  1,420          let t0156 = t056 ^ self.1;
  1,400  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (100x)
    140  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (20x)
  1,320          let t13 = self.1 ^ self.3;
  1,400  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (100x)
    140  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (20x)
      .  
  2,220          let x0 = self.2 ^ t06 ^ t13;
  2,800  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (200x)
    280  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (40x)
    540          let x1 = t056;
    440          let x2 = self.0;
  3,140          let x3 = self.0 ^ self.4 ^ self.7 ^ t13;
  4,200  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (300x)
    420  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (60x)
  1,320          let x4 = self.7 ^ t056;
  1,400  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (100x)
    140  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (20x)
    540          let x5 = t0156;
  1,320          let x6 = self.4 ^ t056;
  1,400  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (100x)
    140  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (20x)
  2,220          let x7 = self.2 ^ self.7 ^ t0156;
  2,800  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (200x)
    280  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (40x)
      .  
  6,920          Bs8State(x0, x1, x2, x3, x4, x5, x6, x7)
    240      }
      .  
    380      fn change_basis_x2s(&self) -> Bs8State<T> {
  1,720          let t46 = self.4 ^ self.6;
  1,400  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (100x)
    140  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (20x)
  1,320          let t35 = self.3 ^ self.5;
  1,400  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (100x)
    140  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (20x)
  1,320          let t06 = self.0 ^ self.6;
  1,400  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (100x)
    140  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (20x)
  1,420          let t357 = t35 ^ self.7;
  1,400  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (100x)
    140  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (20x)
      .  
  1,320          let x0 = self.1 ^ t46;
  1,400  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (100x)
    140  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (20x)
  2,220          let x1 = self.1 ^ self.4 ^ self.5;
  2,800  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (200x)
    280  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (40x)
  2,220          let x2 = self.2 ^ t35 ^ t06;
  2,800  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (200x)
    280  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (40x)
  1,320          let x3 = t46 ^ t357;
  1,400  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (100x)
    140  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (20x)
    440          let x4 = t357;
    540          let x5 = t06;
  1,320          let x6 = self.3 ^ self.7;
  1,400  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (100x)
    140  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (20x)
    460          let x7 = t35;
      .  
  6,900          Bs8State(x0, x1, x2, x3, x4, x5, x6, x7)
    280      }
      .  
     30      fn change_basis_x2a(&self) -> Bs8State<T> {
    150          let t15 = self.1 ^ self.5;
    140  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (10x)
    120          let t36 = self.3 ^ self.6;
    140  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (10x)
    120          let t1356 = t15 ^ t36;
    140  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (10x)
    120          let t07 = self.0 ^ self.7;
    140  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (10x)
      .  
     40          let x0 = self.2;
     40          let x1 = t15;
    200          let x2 = self.4 ^ self.7 ^ t15;
    280  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (20x)
    200          let x3 = self.2 ^ self.4 ^ t1356;
    280  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (20x)
    120          let x4 = self.1 ^ self.6;
    140  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (10x)
    280          let x5 = self.2 ^ self.5 ^ t36 ^ t07;
    420  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (30x)
    120          let x6 = t1356 ^ t07;
    140  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (10x)
    120          let x7 = self.1 ^ self.4;
    140  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (10x)
      .  
    660          Bs8State(x0, x1, x2, x3, x4, x5, x6, x7)
     20      }
      .  
     30      fn change_basis_s2x(&self) -> Bs8State<T> {
    150          let t46 = self.4 ^ self.6;
    140  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (10x)
    120          let t01 = self.0 ^ self.1;
    140  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (10x)
    120          let t0146 = t01 ^ t46;
    140  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (10x)
      .  
    120          let x0 = self.5 ^ t0146;
    140  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (10x)
    200          let x1 = self.0 ^ self.3 ^ self.4;
    280  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (20x)
    200          let x2 = self.2 ^ self.5 ^ self.7;
    280  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (20x)
    120          let x3 = self.7 ^ t46;
    140  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (10x)
    200          let x4 = self.3 ^ self.6 ^ t01;
    280  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (20x)
     40          let x5 = t46;
     50          let x6 = t0146;
    120          let x7 = self.4 ^ self.7;
    140  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (10x)
      .  
    660          Bs8State(x0, x1, x2, x3, x4, x5, x6, x7)
     20      }
      .  }
      .  
      .  impl <T: Not<Output = T> + Copy> Bs8State<T> {
      .      // The special value "x63" is used as part of the sub_bytes and inv_sub_bytes
      .      // steps. It is conceptually a Bs8State value where the 0th, 1st, 5th, and 6th
      .      // elements are all 1s and the other elements are all 0s. The only thing that
      .      // we do with the "x63" value is to XOR a Bs8State with it. We optimize that XOR
      .      // below into just inverting 4 of the elements and leaving the other 4 elements
      .      // untouched.
    280      fn xor_x63(self) -> Bs8State<T> {
  4,040          Bs8State (
  1,440              !self.0,
  3,410  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl core::ops::bit::Not for crypto::simd::fake::u32x4>::not (110x)
    120  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::Not>::not (20x)
    830              !self.1,
  3,410  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl core::ops::bit::Not for crypto::simd::fake::u32x4>::not (110x)
    120  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::Not>::not (20x)
    460              self.2,
    460              self.3,
    460              self.4,
    890              !self.5,
  3,410  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl core::ops::bit::Not for crypto::simd::fake::u32x4>::not (110x)
    120  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::Not>::not (20x)
    830              !self.6,
  3,410  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl core::ops::bit::Not for crypto::simd::fake::u32x4>::not (110x)
    120  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::Not>::not (20x)
    500              self.7)
    280      }
      .  }
      .  
      .  #[derive(Clone, Copy)]
      .  struct Bs4State<T>(T, T, T, T);
      .  
      .  impl <T: Copy> Bs4State<T> {
  2,400      fn split(self) -> (Bs2State<T>, Bs2State<T>) {
 15,360          let Bs4State(x0, x1, x2, x3) = self;
 44,160          (Bs2State(x0, x1), Bs2State(x2, x3))
  2,240      }
      .  
    460      fn join(self, rhs: Bs4State<T>) -> Bs8State<T> {
  1,920          let Bs4State(a0, a1, a2, a3) = self;
  1,920          let Bs4State(b0, b1, b2, b3) = rhs;
  7,200          Bs8State(a0, a1, a2, a3, b0, b1, b2, b3)
    340      }
      .  }
      .  
      .  impl <T: BitXor<Output = T> + Copy> Bs4State<T> {
    800      fn xor(self, rhs: Bs4State<T>) -> Bs4State<T> {
  3,840          let Bs4State(a0, a1, a2, a3) = self;
  3,840          let Bs4State(b0, b1, b2, b3) = rhs;
 16,240          Bs4State(a0 ^ b0, a1 ^ b1, a2 ^ b2, a3 ^ b3)
 12,320  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (880x)
  1,120  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (160x)
    680      }
      .  }
      .  
      .  #[derive(Clone, Copy)]
      .  struct Bs2State<T>(T, T);
      .  
      .  impl <T> Bs2State<T> {
  9,240      fn split(self) -> (T, T) {
 30,360          let Bs2State(x0, x1) = self;
 59,400          (x0, x1)
  9,900      }
      .  
  1,600      fn join(self, rhs: Bs2State<T>) -> Bs4State<T> {
  4,600          let Bs2State(a0, a1) = self;
  4,600          let Bs2State(b0, b1) = rhs;
 18,000          Bs4State(a0, a1, b0, b1)
  1,400      }
      .  }
      .  
      .  impl <T: BitXor<Output = T> + Copy> Bs2State<T> {
  4,800      fn xor(self, rhs: Bs2State<T>) -> Bs2State<T> {
 13,800          let Bs2State(a0, a1) = self;
 13,800          let Bs2State(b0, b1) = rhs;
 63,900          Bs2State(a0 ^ b0, a1 ^ b1)
 46,200  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (3,300x)
  4,200  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (600x)
  4,500      }
      .  }
      .  
      .  // Bit Slice data in the form of 4 u32s in column-major order
    160  fn bit_slice_4x4_with_u16(a: u32, b: u32, c: u32, d: u32) -> Bs8State<u16> {
 10,240      fn pb(x: u32, bit: u32, shift: u32) -> u16 {
 66,560          (((x >> bit) & 1) as u16) << shift
  5,120      }
      .  
  1,440      fn construct(a: u32, b: u32, c: u32, d: u32, bit: u32) -> u16 {
  7,840          pb(a, bit, 0)       | pb(b, bit, 1)       | pb(c, bit, 2)       | pb(d, bit, 3)       |
 21,760  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_4x4_with_u16::pb (640x)
  5,760          pb(a, bit + 8, 4)   | pb(b, bit + 8, 5)   | pb(c, bit + 8, 6)   | pb(d, bit + 8, 7)   |
 21,760  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_4x4_with_u16::pb (640x)
  5,760          pb(a, bit + 16, 8)  | pb(b, bit + 16, 9)  | pb(c, bit + 16, 10) | pb(d, bit + 16, 11) |
 21,760  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_4x4_with_u16::pb (640x)
  5,760          pb(a, bit + 24, 12) | pb(b, bit + 24, 13) | pb(c, bit + 24, 14) | pb(d, bit + 24, 15)
 21,760  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_4x4_with_u16::pb (640x)
    320      }
      .  
    260      let x0 = construct(a, b, c, d, 0);
 15,360  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_4x4_with_u16::construct (20x)
     80      let x1 = construct(a, b, c, d, 1);
 15,360  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_4x4_with_u16::construct (20x)
     80      let x2 = construct(a, b, c, d, 2);
 15,360  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_4x4_with_u16::construct (20x)
     80      let x3 = construct(a, b, c, d, 3);
 15,360  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_4x4_with_u16::construct (20x)
     80      let x4 = construct(a, b, c, d, 4);
 15,360  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_4x4_with_u16::construct (20x)
     80      let x5 = construct(a, b, c, d, 5);
 15,360  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_4x4_with_u16::construct (20x)
     80      let x6 = construct(a, b, c, d, 6);
 15,360  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_4x4_with_u16::construct (20x)
     80      let x7 = construct(a, b, c, d, 7);
 15,360  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_4x4_with_u16::construct (20x)
      .  
    320      Bs8State(x0, x1, x2, x3, x4, x5, x6, x7)
     40  }
      .  
      .  // Bit slice a single u32 value - this is used to calculate the SubBytes step when creating the
      .  // round keys.
     80  fn bit_slice_4x1_with_u16(a: u32) -> Bs8State<u16> {
    100      bit_slice_4x4_with_u16(a, 0, 0, 0)
124,820  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_4x4_with_u16 (20x)
     40  }
      .  
      .  // Bit slice a 16 byte array in column major order
      .  fn bit_slice_1x16_with_u16(data: &[u8]) -> Bs8State<u16> {
      .      let mut n = [0u32; 4];
      .      read_u32v_le(&mut n, data);
      .  
      .      let a = n[0];
      .      let b = n[1];
      .      let c = n[2];
      .      let d = n[3];
      .  
      .      bit_slice_4x4_with_u16(a, b, c, d)
      .  }
      .  
      .  // Un Bit Slice into a set of 4 u32s
    100  fn un_bit_slice_4x4_with_u16(bs: &Bs8State<u16>) -> (u32, u32, u32, u32) {
 10,240      fn pb(x: u16, bit: u32, shift: u32) -> u32 {
 71,680          (((x >> bit) & 1) as u32) << shift
  5,120      }
      .  
    480      fn deconstruct(bs: &Bs8State<u16>, bit: u32) -> u32 {
  1,280          let Bs8State(x0, x1, x2, x3, x4, x5, x6, x7) = *bs;
      .  
  7,360          pb(x0, bit, 0) | pb(x1, bit, 1) | pb(x2, bit, 2) | pb(x3, bit, 3) |
 11,520  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_4x4_with_u16::pb (320x)
  2,240          pb(x4, bit, 4) | pb(x5, bit, 5) | pb(x6, bit, 6) | pb(x7, bit, 7) |
 11,520  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_4x4_with_u16::pb (320x)
      .  
  3,520          pb(x0, bit + 4, 8)  | pb(x1, bit + 4, 9)  | pb(x2, bit + 4, 10) | pb(x3, bit + 4, 11) |
 11,520  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_4x4_with_u16::pb (320x)
  3,520          pb(x4, bit + 4, 12) | pb(x5, bit + 4, 13) | pb(x6, bit + 4, 14) | pb(x7, bit + 4, 15) |
 11,520  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_4x4_with_u16::pb (320x)
      .  
  3,520          pb(x0, bit + 8, 16) | pb(x1, bit + 8, 17) | pb(x2, bit + 8, 18) | pb(x3, bit + 8, 19) |
 11,520  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_4x4_with_u16::pb (320x)
  3,520          pb(x4, bit + 8, 20) | pb(x5, bit + 8, 21) | pb(x6, bit + 8, 22) | pb(x7, bit + 8, 23) |
 11,520  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_4x4_with_u16::pb (320x)
      .  
  3,520          pb(x0, bit + 12, 24) | pb(x1, bit + 12, 25) | pb(x2, bit + 12, 26) | pb(x3, bit + 12, 27) |
 11,520  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_4x4_with_u16::pb (320x)
  3,520          pb(x4, bit + 12, 28) | pb(x5, bit + 12, 29) | pb(x6, bit + 12, 30) | pb(x7, bit + 12, 31)
 11,520  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_4x4_with_u16::pb (320x)
    320      }
      .  
    140      let a = deconstruct(bs, 0);
 32,980  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_4x4_with_u16::deconstruct (20x)
     80      let b = deconstruct(bs, 1);
 32,980  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_4x4_with_u16::deconstruct (20x)
     80      let c = deconstruct(bs, 2);
 32,980  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_4x4_with_u16::deconstruct (20x)
     80      let d = deconstruct(bs, 3);
 32,980  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_4x4_with_u16::deconstruct (20x)
      .  
    160      (a, b, c, d)
     40  }
      .  
      .  // Un Bit Slice into a single u32. This is used when creating the round keys.
     40  fn un_bit_slice_4x1_with_u16(bs: &Bs8State<u16>) -> u32 {
    140      let (a, _, _, _) = un_bit_slice_4x4_with_u16(bs);
132,700  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_4x4_with_u16 (20x)
      .      a
     40  }
      .  
      .  // Un Bit Slice into a 16 byte array
      .  fn un_bit_slice_1x16_with_u16(bs: &Bs8State<u16>, output: &mut [u8]) {
      .      let (a, b, c, d) = un_bit_slice_4x4_with_u16(bs);
      .  
      .      write_u32_le(&mut output[0..4], a);
      .      write_u32_le(&mut output[4..8], b);
      .      write_u32_le(&mut output[8..12], c);
      .      write_u32_le(&mut output[12..16], d);
      .  }
      .  
      .  // Bit Slice a 128 byte array of eight 16 byte blocks. Each block is in column major order.
    231  fn bit_slice_1x128_with_u32x4(data: &[u8]) -> Bs8State<u32x4> {
    495  => ???:__rust_probestack (33x)
    132      let bit0 = u32x4(0x01010101, 0x01010101, 0x01010101, 0x01010101);
    132      let bit1 = u32x4(0x02020202, 0x02020202, 0x02020202, 0x02020202);
    132      let bit2 = u32x4(0x04040404, 0x04040404, 0x04040404, 0x04040404);
    132      let bit3 = u32x4(0x08080808, 0x08080808, 0x08080808, 0x08080808);
    132      let bit4 = u32x4(0x10101010, 0x10101010, 0x10101010, 0x10101010);
    132      let bit5 = u32x4(0x20202020, 0x20202020, 0x20202020, 0x20202020);
    132      let bit6 = u32x4(0x40404040, 0x40404040, 0x40404040, 0x40404040);
    132      let bit7 = u32x4(0x80808080, 0x80808080, 0x80808080, 0x80808080);
      .  
  1,584      fn read_row_major(data: &[u8]) -> u32x4 {
  1,848          u32x4(
  3,168              (data[0] as u32) |
  2,640              ((data[4] as u32) << 8) |
  2,640              ((data[8] as u32) << 16) |
  2,640              ((data[12] as u32) << 24),
  2,904              (data[1] as u32) |
  2,640              ((data[5] as u32) << 8) |
  2,640              ((data[9] as u32) << 16) |
  2,640              ((data[13] as u32) << 24),
  2,904              (data[2] as u32) |
  2,640              ((data[6] as u32) << 8) |
  2,640              ((data[10] as u32) << 16) |
  2,640              ((data[14] as u32) << 24),
  3,432              (data[3] as u32) |
  2,640              ((data[7] as u32) << 8) |
  2,640              ((data[11] as u32) << 16) |
  2,640              ((data[15] as u32) << 24))
    528      }
      .  
    693      let t0 = read_row_major(&data[0..16]);
  7,326  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_1x128_with_u32x4::read_row_major (33x)
  4,389  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::Index<I> for [T]>::index (33x)
    462      let t1 = read_row_major(&data[16..32]);
  7,326  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_1x128_with_u32x4::read_row_major (33x)
  4,389  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::Index<I> for [T]>::index (33x)
    462      let t2 = read_row_major(&data[32..48]);
  7,326  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_1x128_with_u32x4::read_row_major (33x)
  4,389  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::Index<I> for [T]>::index (33x)
    462      let t3 = read_row_major(&data[48..64]);
  7,326  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_1x128_with_u32x4::read_row_major (33x)
  4,389  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::Index<I> for [T]>::index (33x)
    462      let t4 = read_row_major(&data[64..80]);
  7,326  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_1x128_with_u32x4::read_row_major (33x)
  4,389  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::Index<I> for [T]>::index (33x)
    462      let t5 = read_row_major(&data[80..96]);
  7,326  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_1x128_with_u32x4::read_row_major (33x)
  4,389  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::Index<I> for [T]>::index (33x)
    462      let t6 = read_row_major(&data[96..112]);
  7,326  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_1x128_with_u32x4::read_row_major (33x)
  4,389  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::Index<I> for [T]>::index (33x)
    462      let t7 = read_row_major(&data[112..128]);
  7,326  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_1x128_with_u32x4::read_row_major (33x)
  4,389  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::Index<I> for [T]>::index (33x)
      .  
  2,904      let x0 = (t0 & bit0) | (t1.lsh(1) & bit1) | (t2.lsh(2) & bit2) | (t3.lsh(3) & bit3) |
 15,345  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (99x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
  3,234  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (231x)
  2,112          (t4.lsh(4) & bit4) | (t5.lsh(5) & bit5) | (t6.lsh(6) & bit6) | (t7.lsh(7) & bit7);
 20,460  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (132x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
  2,904      let x1 = (t0.rsh(1) & bit0) | (t1 & bit1) | (t2.lsh(1) & bit2) | (t3.lsh(2) & bit3) |
  5,115  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (33x)
 10,230  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (66x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
  3,234  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (231x)
  2,112          (t4.lsh(3) & bit4) | (t5.lsh(4) & bit5) | (t6.lsh(5) & bit6) | (t7.lsh(6) & bit7);
 20,460  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (132x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
  2,904      let x2 = (t0.rsh(2) & bit0) | (t1.rsh(1) & bit1) | (t2 & bit2) | (t3.lsh(1) & bit3) |
 10,230  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (66x)
  5,115  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (33x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
  3,234  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (231x)
  2,112          (t4.lsh(2) & bit4) | (t5.lsh(3) & bit5) | (t6.lsh(4) & bit6) | (t7.lsh(5) & bit7);
 20,460  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (132x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
  2,904      let x3 = (t0.rsh(3) & bit0) | (t1.rsh(2) & bit1) | (t2.rsh(1) & bit2) | (t3 & bit3) |
 15,345  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (99x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
  3,234  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (231x)
  2,112          (t4.lsh(1) & bit4) | (t5.lsh(2) & bit5) | (t6.lsh(3) & bit6) | (t7.lsh(4) & bit7);
 20,460  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (132x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
  3,036      let x4 = (t0.rsh(4) & bit0) | (t1.rsh(3) & bit1) | (t2.rsh(2) & bit2) | (t3.rsh(1) & bit3) |
 20,460  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (132x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
  3,234  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (231x)
  1,980          (t4 & bit4) | (t5.lsh(1) & bit5) | (t6.lsh(2) & bit6) | (t7.lsh(3) & bit7);
 15,345  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (99x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
  3,036      let x5 = (t0.rsh(5) & bit0) | (t1.rsh(4) & bit1) | (t2.rsh(3) & bit2) | (t3.rsh(2) & bit3) |
 20,460  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (132x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
  3,234  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (231x)
  1,980          (t4.rsh(1) & bit4) | (t5 & bit5) | (t6.lsh(1) & bit6) | (t7.lsh(2) & bit7);
  5,115  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (33x)
 10,230  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (66x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
  3,036      let x6 = (t0.rsh(6) & bit0) | (t1.rsh(5) & bit1) | (t2.rsh(4) & bit2) | (t3.rsh(3) & bit3) |
 20,460  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (132x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
  3,234  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (231x)
  1,980          (t4.rsh(2) & bit4) | (t5.rsh(1) & bit5) | (t6 & bit6) | (t7.lsh(1) & bit7);
 10,230  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (66x)
  5,115  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (33x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
  3,036      let x7 = (t0.rsh(7) & bit0) | (t1.rsh(6) & bit1) | (t2.rsh(5) & bit2) | (t3.rsh(4) & bit3) |
 20,460  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (132x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
  3,234  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (231x)
  1,980          (t4.rsh(3) & bit4) | (t5.rsh(2) & bit5) | (t6.rsh(1) & bit6) | (t7 & bit7);
 15,345  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (99x)
  1,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (132x)
      .  
  2,178      Bs8State(x0, x1, x2, x3, x4, x5, x6, x7)
     66  }
      .  
      .  // Bit slice a set of 4 u32s by filling a full 128 byte data block with those repeated values. This
      .  // is used as part of bit slicing the round keys.
    198  fn bit_slice_fill_4x4_with_u32x4(a: u32, b: u32, c: u32, d: u32) -> Bs8State<u32x4> {
    198      let mut tmp = [0u8; 128];
    418  => ???:0x0000000000136118 (22x)
  3,036      for i in 0..8 {
 34,452  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/range.rs:core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next (198x)
    154  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (22x)
  5,632          write_u32_le(&mut tmp[i * 16..i * 16 + 4], a);
 23,408  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut (176x)
 22,880  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs:crypto::cryptoutil::write_u32_le (176x)
  6,688          write_u32_le(&mut tmp[i * 16 + 4..i * 16 + 8], b);
 23,408  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut (176x)
 22,880  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs:crypto::cryptoutil::write_u32_le (176x)
  6,688          write_u32_le(&mut tmp[i * 16 + 8..i * 16 + 12], c);
 23,408  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut (176x)
 22,880  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs:crypto::cryptoutil::write_u32_le (176x)
  6,688          write_u32_le(&mut tmp[i * 16 + 12..i * 16 + 16], d);
 23,408  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut (176x)
 22,880  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs:crypto::cryptoutil::write_u32_le (176x)
      .      }
    132      bit_slice_1x128_with_u32x4(&tmp)
322,608  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::bit_slice_1x128_with_u32x4 (22x)
     44  }
      .  
      .  // Un bit slice into a 128 byte buffer.
     55  fn un_bit_slice_1x128_with_u32x4(bs: Bs8State<u32x4>, output: &mut [u8]) {
    165  => ???:__rust_probestack (11x)
    352      let Bs8State(t0, t1, t2, t3, t4, t5, t6, t7) = bs;
      .  
     44      let bit0 = u32x4(0x01010101, 0x01010101, 0x01010101, 0x01010101);
     44      let bit1 = u32x4(0x02020202, 0x02020202, 0x02020202, 0x02020202);
     44      let bit2 = u32x4(0x04040404, 0x04040404, 0x04040404, 0x04040404);
     44      let bit3 = u32x4(0x08080808, 0x08080808, 0x08080808, 0x08080808);
     44      let bit4 = u32x4(0x10101010, 0x10101010, 0x10101010, 0x10101010);
     44      let bit5 = u32x4(0x20202020, 0x20202020, 0x20202020, 0x20202020);
     44      let bit6 = u32x4(0x40404040, 0x40404040, 0x40404040, 0x40404040);
     44      let bit7 = u32x4(0x80808080, 0x80808080, 0x80808080, 0x80808080);
      .  
      .      // decode the individual blocks, in row-major order
      .      // TODO: this is identical to the same block in bit_slice_1x128_with_u32x4
  1,012      let x0 = (t0 & bit0) | (t1.lsh(1) & bit1) | (t2.lsh(2) & bit2) | (t3.lsh(3) & bit3) |
  5,115  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (33x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
  1,078  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (77x)
    704          (t4.lsh(4) & bit4) | (t5.lsh(5) & bit5) | (t6.lsh(6) & bit6) | (t7.lsh(7) & bit7);
  6,820  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (44x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
    968      let x1 = (t0.rsh(1) & bit0) | (t1 & bit1) | (t2.lsh(1) & bit2) | (t3.lsh(2) & bit3) |
  3,410  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (22x)
  1,705  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (11x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
  1,078  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (77x)
    704          (t4.lsh(3) & bit4) | (t5.lsh(4) & bit5) | (t6.lsh(5) & bit6) | (t7.lsh(6) & bit7);
  6,820  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (44x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
    968      let x2 = (t0.rsh(2) & bit0) | (t1.rsh(1) & bit1) | (t2 & bit2) | (t3.lsh(1) & bit3) |
  1,705  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (11x)
  3,410  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (22x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
  1,078  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (77x)
    704          (t4.lsh(2) & bit4) | (t5.lsh(3) & bit5) | (t6.lsh(4) & bit6) | (t7.lsh(5) & bit7);
  6,820  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (44x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
    968      let x3 = (t0.rsh(3) & bit0) | (t1.rsh(2) & bit1) | (t2.rsh(1) & bit2) | (t3 & bit3) |
  5,115  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (33x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
  1,078  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (77x)
    704          (t4.lsh(1) & bit4) | (t5.lsh(2) & bit5) | (t6.lsh(3) & bit6) | (t7.lsh(4) & bit7);
  6,820  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (44x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
  1,012      let x4 = (t0.rsh(4) & bit0) | (t1.rsh(3) & bit1) | (t2.rsh(2) & bit2) | (t3.rsh(1) & bit3) |
  6,820  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (44x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
  1,078  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (77x)
    660          (t4 & bit4) | (t5.lsh(1) & bit5) | (t6.lsh(2) & bit6) | (t7.lsh(3) & bit7);
  5,115  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (33x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
  1,012      let x5 = (t0.rsh(5) & bit0) | (t1.rsh(4) & bit1) | (t2.rsh(3) & bit2) | (t3.rsh(2) & bit3) |
  6,820  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (44x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
  1,078  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (77x)
    660          (t4.rsh(1) & bit4) | (t5 & bit5) | (t6.lsh(1) & bit6) | (t7.lsh(2) & bit7);
  3,410  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (22x)
  1,705  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (11x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
  1,012      let x6 = (t0.rsh(6) & bit0) | (t1.rsh(5) & bit1) | (t2.rsh(4) & bit2) | (t3.rsh(3) & bit3) |
  6,820  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (44x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
  1,078  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (77x)
    660          (t4.rsh(2) & bit4) | (t5.rsh(1) & bit5) | (t6 & bit6) | (t7.lsh(1) & bit7);
  3,410  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (22x)
  1,705  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::lsh (11x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
  1,012      let x7 = (t0.rsh(7) & bit0) | (t1.rsh(6) & bit1) | (t2.rsh(5) & bit2) | (t3.rsh(4) & bit3) |
  6,820  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (44x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
  1,078  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitOr>::bitor (77x)
    660          (t4.rsh(3) & bit4) | (t5.rsh(2) & bit5) | (t6.rsh(1) & bit6) | (t7 & bit7);
  5,115  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::<impl crypto::simd::fake::u32x4>::rsh (33x)
    616  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (44x)
      .  
    440      fn write_row_major(block: u32x4, output: &mut [u8]) {
    704          let u32x4(a0, a1, a2, a3) = block;
    968          output[0] = a0 as u8;
    616          output[1] = a1 as u8;
    616          output[2] = a2 as u8;
    704          output[3] = a3 as u8;
    880          output[4] = (a0 >> 8) as u8;
    880          output[5] = (a1 >> 8) as u8;
    880          output[6] = (a2 >> 8) as u8;
    880          output[7] = (a3 >> 8) as u8;
    880          output[8] = (a0 >> 16) as u8;
    880          output[9] = (a1 >> 16) as u8;
    880          output[10] = (a2 >> 16) as u8;
    880          output[11] = (a3 >> 16) as u8;
    880          output[12] = (a0 >> 24) as u8;
    880          output[13] = (a1 >> 24) as u8;
    880          output[14] = (a2 >> 24) as u8;
    792          output[15] = (a3 >> 24) as u8;
    176      }
      .  
    198      write_row_major(x0, &mut output[0..16]);
  2,189  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_1x128_with_u32x4::write_row_major (11x)
  1,463  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut (11x)
    198      write_row_major(x1, &mut output[16..32]);
  2,189  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_1x128_with_u32x4::write_row_major (11x)
  1,463  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut (11x)
    198      write_row_major(x2, &mut output[32..48]);
  2,189  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_1x128_with_u32x4::write_row_major (11x)
  1,463  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut (11x)
    198      write_row_major(x3, &mut output[48..64]);
  2,189  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_1x128_with_u32x4::write_row_major (11x)
  1,463  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut (11x)
    198      write_row_major(x4, &mut output[64..80]);
  2,189  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_1x128_with_u32x4::write_row_major (11x)
  1,463  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut (11x)
    198      write_row_major(x5, &mut output[80..96]);
  2,189  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_1x128_with_u32x4::write_row_major (11x)
  1,463  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut (11x)
    198      write_row_major(x6, &mut output[96..112]);
  2,189  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_1x128_with_u32x4::write_row_major (11x)
  1,463  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut (11x)
    198      write_row_major(x7, &mut output[112..128])
  2,189  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::un_bit_slice_1x128_with_u32x4::write_row_major (11x)
  1,463  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut (11x)
     22  }
      .  
      .  // The Gf2Ops, Gf4Ops, and Gf8Ops traits specify the functions needed to calculate the AES S-Box
      .  // values. This particuar implementation of those S-Box values is taken from [7], so that is where
      .  // to look for details on how all that all works. This includes the transformations matrices defined
      .  // below for the change_basis operation on the u32 and u32x4 types.
      .  
      .  // Operations in GF(2^2) using normal basis (Omega^2,Omega)
      .  trait Gf2Ops {
-- line 916 ----------------------------------------
-- line 926 ----------------------------------------
      .      // square
      .      fn sq(self) -> Self;
      .  
      .      // Same as sqaure
      .      fn inv(self) -> Self;
      .  }
      .  
      .  impl <T: BitXor<Output = T> + BitAnd<Output = T> + Copy> Gf2Ops for Bs2State<T> {
  3,840      fn mul(self, y: Bs2State<T>) -> Bs2State<T> {
 31,680          let (b, a) = self.split();
 39,600  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::split (1,560x)
 27,720          let (d, c) = y.split();
 39,600  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::split (1,560x)
 41,040          let e = (a ^ b) & (c ^ d);
 36,960  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (2,640x)
 18,480  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (1,320x)
  3,360  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (480x)
  1,680  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitAnd>::bitand (240x)
 29,040          let p = (a & c) ^ e;
 18,480  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (1,320x)
 18,480  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (1,320x)
  1,680  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (240x)
  1,680  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitAnd>::bitand (240x)
 29,040          let q = (b & d) ^ e;
 18,480  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (1,320x)
 18,480  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitAnd>::bitand (1,320x)
  1,680  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (240x)
  1,680  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitAnd>::bitand (240x)
 24,480          Bs2State(q, p)
  3,600      }
      .  
  1,120      fn scl_n(self) -> Bs2State<T> {
  9,880          let (b, a) = self.split();
 13,200  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::split (520x)
  5,680          let q = a ^ b;
  6,160  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (440x)
    560  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (80x)
  8,160          Bs2State(q, b)
  1,200      }
      .  
    280      fn scl_n2(self) -> Bs2State<T> {
  2,470          let (b, a) = self.split();
  3,300  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::split (130x)
  1,420          let p = a ^ b;
  1,540  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (110x)
    140  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs:<u16 as core::ops::bit::BitXor>::bitxor (20x)
    460          let q = a;
  2,040          Bs2State(q, p)
    300      }
      .  
  1,120      fn sq(self) -> Bs2State<T> {
  9,880          let (b, a) = self.split();
 13,200  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::split (520x)
  8,080          Bs2State(a, b)
  1,200      }
      .  
    280      fn inv(self) -> Bs2State<T> {
  1,200          self.sq()
  8,500  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs2State<T> as crypto::aessafe::Gf2Ops>::sq (130x)
    260      }
      .  }
      .  
      .  // Operations in GF(2^4) using normal basis (alpha^8,alpha^2)
      .  trait Gf4Ops {
      .      // multiply
      .      fn mul(self, y: Self) -> Self;
      .  
      .      // square & scale by nu
-- line 971 ----------------------------------------
-- line 972 ----------------------------------------
      .      // nu = beta^8 = N^2*alpha^2, N = w^2
      .      fn sq_scl(self) -> Self;
      .  
      .      // inverse
      .      fn inv(self) -> Self;
      .  }
      .  
      .  impl <T: BitXor<Output = T> + BitAnd<Output = T> + Copy> Gf4Ops for Bs4State<T> {
  1,080      fn mul(self, y: Bs4State<T>) -> Bs4State<T> {
 10,470          let (b, a) = self.split();
 24,060  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs4State<T>::split (390x)
  4,290  => ???:0x00000000001360f0 (330x)
 10,050          let (d, c) = y.split();
 24,060  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs4State<T>::split (390x)
  4,290  => ???:0x00000000001360f0 (330x)
  7,560          let f = c.xor(d);
 30,690  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::xor (390x)
 13,470          let e = a.xor(b).mul(f).scl_n();
103,890  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs2State<T> as crypto::aessafe::Gf2Ops>::mul (390x)
 30,690  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::xor (390x)
 34,920  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs2State<T> as crypto::aessafe::Gf2Ops>::scl_n (390x)
 12,120          let p = a.mul(c).xor(e);
103,890  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs2State<T> as crypto::aessafe::Gf2Ops>::mul (390x)
 30,690  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::xor (390x)
 12,120          let q = b.mul(d).xor(e);
103,890  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs2State<T> as crypto::aessafe::Gf2Ops>::mul (390x)
 30,690  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::xor (390x)
  7,380          q.join(p)
 18,120  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::join (390x)
    840      }
      .  
    300      fn sq_scl(self) -> Bs4State<T> {
  3,270          let (b, a) = self.split();
  8,020  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs4State<T>::split (130x)
  1,430  => ???:0x00000000001360f0 (110x)
  2,890          let p = a.xor(b).sq();
  8,500  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs2State<T> as crypto::aessafe::Gf2Ops>::sq (130x)
 10,230  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::xor (130x)
  1,820          let q = b.sq().scl_n2();
  8,500  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs2State<T> as crypto::aessafe::Gf2Ops>::sq (130x)
 12,100  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs2State<T> as crypto::aessafe::Gf2Ops>::scl_n2 (130x)
  2,460          q.join(p)
  6,040  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::join (130x)
    280      }
      .  
    300      fn inv(self) -> Bs4State<T> {
  3,270          let (b, a) = self.split();
  8,020  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs4State<T>::split (130x)
  1,430  => ???:0x00000000001360f0 (110x)
  3,420          let c = a.xor(b).sq().scl_n();
 10,230  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::xor (130x)
 11,640  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs2State<T> as crypto::aessafe::Gf2Ops>::scl_n (130x)
  8,500  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs2State<T> as crypto::aessafe::Gf2Ops>::sq (130x)
  2,480          let d = a.mul(b);
 34,630  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs2State<T> as crypto::aessafe::Gf2Ops>::mul (130x)
  2,930          let e = c.xor(d).inv();
 10,230  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::xor (130x)
 10,500  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs2State<T> as crypto::aessafe::Gf2Ops>::inv (130x)
  2,480          let p = e.mul(b);
 34,630  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs2State<T> as crypto::aessafe::Gf2Ops>::mul (130x)
  2,480          let q = e.mul(a);
 34,630  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs2State<T> as crypto::aessafe::Gf2Ops>::mul (130x)
  2,460          q.join(p)
  6,040  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs2State<T>::join (130x)
    280      }
      .  }
      .  
      .  // Operations in GF(2^8) using normal basis (d^16,d)
      .  trait Gf8Ops {
      .      // inverse
      .      fn inv(&self) -> Self;
      .  }
      .  
      .  impl <T: BitXor<Output = T> + BitAnd<Output = T> + Copy + Default> Gf8Ops for Bs8State<T> {
    390      fn inv(&self) -> Bs8State<T> {
  3,800          let (b, a) = self.split();
  6,270  => ???:0x00000000001360f0 (330x)
 16,560  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs8State<T>::split (130x)
  2,830          let c = a.xor(b).sq_scl();
 66,030  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs4State<T> as crypto::aessafe::Gf4Ops>::sq_scl (130x)
 19,610  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs4State<T>::xor (130x)
  2,860  => ???:0x00000000001360f0 (220x)
  2,620          let d = a.mul(b);
206,690  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs4State<T> as crypto::aessafe::Gf4Ops>::mul (130x)
  2,860  => ???:0x00000000001360f0 (220x)
  3,050          let e = c.xor(d).inv();
190,850  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs4State<T> as crypto::aessafe::Gf4Ops>::inv (130x)
 19,610  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs4State<T>::xor (130x)
  2,860  => ???:0x00000000001360f0 (220x)
  2,620          let p = e.mul(b);
206,690  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs4State<T> as crypto::aessafe::Gf4Ops>::mul (130x)
  2,860  => ???:0x00000000001360f0 (220x)
  2,620          let q = e.mul(a);
206,690  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs4State<T> as crypto::aessafe::Gf4Ops>::mul (130x)
  2,860  => ???:0x00000000001360f0 (220x)
  2,580          q.join(p)
  2,860  => ???:0x00000000001360f0 (220x)
 11,840  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs4State<T>::join (130x)
    260      }
      .  }
      .  
      .  impl <T: AesBitValueOps + Copy + 'static> AesOps for Bs8State<T> {
    240      fn sub_bytes(self) -> Bs8State<T> {
    480          let nb: Bs8State<T> = self.change_basis_a2x();
 46,140  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs8State<T>::change_basis_a2x (120x)
    360          let inv = nb.inv();
906,620  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::Gf8Ops>::inv (120x)
    360          let nb2: Bs8State<T> = inv.change_basis_x2s();
 41,140  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs8State<T>::change_basis_x2s (120x)
  1,240          nb2.xor_x63()
 22,980  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs8State<T>::xor_x63 (120x)
  3,100  => ???:0x00000000001360f0 (100x)
    240      }
      .  
     20      fn inv_sub_bytes(self) -> Bs8State<T> {
    100          let t = self.xor_x63();
  2,150  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs8State<T>::xor_x63 (10x)
    310  => ???:0x00000000001360f0 (10x)
     30          let nb: Bs8State<T> = t.change_basis_s2x();
  3,930  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs8State<T>::change_basis_s2x (10x)
     30          let inv = nb.inv();
 82,280  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::aessafe::Bs8State<T> as crypto::aessafe::Gf8Ops>::inv (10x)
     20          inv.change_basis_x2a()
  4,390  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs8State<T>::change_basis_x2a (10x)
     20      }
      .  
    200      fn shift_rows(self) -> Bs8State<T> {
  3,200          let Bs8State(x0, x1, x2, x3, x4, x5, x6, x7) = self;
  3,400          Bs8State(
    900              x0.shift_row(),
  5,600  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::shift_row (100x)
    700              x1.shift_row(),
  5,600  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::shift_row (100x)
    700              x2.shift_row(),
  5,600  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::shift_row (100x)
    700              x3.shift_row(),
  5,600  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::shift_row (100x)
    700              x4.shift_row(),
  5,600  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::shift_row (100x)
    700              x5.shift_row(),
  5,600  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::shift_row (100x)
    700              x6.shift_row(),
  5,600  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::shift_row (100x)
    700              x7.shift_row())
  5,600  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::shift_row (100x)
    200      }
      .  
     20      fn inv_shift_rows(self) -> Bs8State<T> {
    320          let Bs8State(x0, x1, x2, x3, x4, x5, x6, x7) = self;
    340          Bs8State(
     90              x0.inv_shift_row(),
    560  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::inv_shift_row (10x)
     70              x1.inv_shift_row(),
    560  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::inv_shift_row (10x)
     70              x2.inv_shift_row(),
    560  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::inv_shift_row (10x)
     70              x3.inv_shift_row(),
    560  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::inv_shift_row (10x)
     70              x4.inv_shift_row(),
    560  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::inv_shift_row (10x)
     70              x5.inv_shift_row(),
    560  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::inv_shift_row (10x)
     70              x6.inv_shift_row(),
    560  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::inv_shift_row (10x)
     70              x7.inv_shift_row())
    560  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::inv_shift_row (10x)
     20      }
      .  
      .      // Formula from [5]
    180      fn mix_columns(self) -> Bs8State<T> {
  2,880          let Bs8State(x0, x1, x2, x3, x4, x5, x6, x7) = self;
      .  
  4,500          let x0out = x7 ^ x7.ror1() ^ x0.ror1() ^ (x0 ^ x0.ror1()).ror2();
  5,040  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (360x)
  4,320  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (270x)
  1,440  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (90x)
  6,030          let x1out = x0 ^ x0.ror1() ^ x7 ^ x7.ror1() ^ x1.ror1() ^ (x1 ^ x1.ror1()).ror2();
  7,560  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (540x)
  5,760  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (360x)
  1,440  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (90x)
  4,320          let x2out = x1 ^ x1.ror1() ^ x2.ror1() ^ (x2 ^ x2.ror1()).ror2();
  5,040  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (360x)
  4,320  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (270x)
  1,440  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (90x)
  6,030          let x3out = x2 ^ x2.ror1() ^ x7 ^ x7.ror1() ^ x3.ror1() ^ (x3 ^ x3.ror1()).ror2();
  7,560  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (540x)
  5,760  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (360x)
  1,440  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (90x)
  6,030          let x4out = x3 ^ x3.ror1() ^ x7 ^ x7.ror1() ^ x4.ror1() ^ (x4 ^ x4.ror1()).ror2();
  7,560  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (540x)
  5,760  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (360x)
  1,440  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (90x)
  4,320          let x5out = x4 ^ x4.ror1() ^ x5.ror1() ^ (x5 ^ x5.ror1()).ror2();
  5,040  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (360x)
  4,320  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (270x)
  1,440  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (90x)
  4,320          let x6out = x5 ^ x5.ror1() ^ x6.ror1() ^ (x6 ^ x6.ror1()).ror2();
  5,040  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (360x)
  4,320  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (270x)
  1,440  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (90x)
  4,320          let x7out = x6 ^ x6.ror1() ^ x7.ror1() ^ (x7 ^ x7.ror1()).ror2();
  5,040  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (360x)
  4,320  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (270x)
  1,440  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (90x)
      .  
  5,940          Bs8State(x0out, x1out, x2out, x3out, x4out, x5out, x6out, x7out)
    180      }
      .  
      .      // Formula from [6]
     36      fn inv_mix_columns(self) -> Bs8State<T> {
    135  => ???:__rust_probestack (9x)
    288          let Bs8State(x0, x1, x2, x3, x4, x5, x6, x7) = self;
      .  
    315          let x0out = x5 ^ x6 ^ x7 ^
    630  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (45x)
    207              (x5 ^ x7 ^ x0).ror1() ^
    252  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (18x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (9x)
    207              (x0 ^ x5 ^ x6).ror2() ^
    252  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (18x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (9x)
    135              (x5 ^ x0).ror3();
    126  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (9x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror3 (9x)
    216          let x1out = x5 ^ x0 ^
    504  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (36x)
    351              (x6 ^ x5 ^ x0 ^ x7 ^ x1).ror1() ^
    504  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (36x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (9x)
    207              (x1 ^ x7 ^ x5).ror2() ^
    252  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (18x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (9x)
    207              (x6 ^ x5 ^ x1).ror3();
    252  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (18x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror3 (9x)
    288          let x2out = x6 ^ x0 ^ x1 ^
    630  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (45x)
    279              (x7 ^ x6 ^ x1 ^ x2).ror1() ^
    378  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (27x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (9x)
    207              (x0 ^ x2 ^ x6).ror2() ^
    252  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (18x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (9x)
    207              (x7 ^ x6 ^ x2).ror3();
    252  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (18x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror3 (9x)
    432          let x3out = x0 ^ x5 ^ x1 ^ x6 ^ x2 ^
    882  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (63x)
    279              (x0 ^ x5 ^ x2 ^ x3).ror1() ^
    378  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (27x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (9x)
    423              (x0 ^ x1 ^ x3 ^ x5 ^ x6 ^ x7).ror2() ^
    630  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (45x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (9x)
    279              (x0 ^ x5 ^ x7 ^ x3).ror3();
    378  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (27x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror3 (9x)
    360          let x4out = x1 ^ x5 ^ x2 ^ x3 ^
    756  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (54x)
    423              (x1 ^ x6 ^ x5 ^ x3 ^ x7 ^ x4).ror1() ^
    630  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (45x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (9x)
    351              (x1 ^ x2 ^ x4 ^ x5 ^ x7).ror2() ^
    504  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (36x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (9x)
    279              (x1 ^ x5 ^ x6 ^ x4).ror3();
    378  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (27x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror3 (9x)
    360          let x5out = x2 ^ x6 ^ x3 ^ x4 ^
    756  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (54x)
    351              (x2 ^ x7 ^ x6 ^ x4 ^ x5).ror1() ^
    504  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (36x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (9x)
    279              (x2 ^ x3 ^ x5 ^ x6).ror2() ^
    378  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (27x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (9x)
    279              (x2 ^ x6 ^ x7 ^ x5).ror3();
    378  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (27x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror3 (9x)
    360          let x6out =  x3 ^ x7 ^ x4 ^ x5 ^
    756  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (54x)
    279              (x3 ^ x7 ^ x5 ^ x6).ror1() ^
    378  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (27x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (9x)
    279              (x3 ^ x4 ^ x6 ^ x7).ror2() ^
    378  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (27x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (9x)
    207              (x3 ^ x7 ^ x6).ror3();
    252  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (18x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror3 (9x)
    288          let x7out = x4 ^ x5 ^ x6 ^
    630  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (45x)
    207              (x4 ^ x6 ^ x7).ror1() ^
    252  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (18x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror1 (9x)
    207              (x4 ^ x5 ^ x7).ror2() ^
    252  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (18x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror2 (9x)
    135              (x4 ^ x7).ror3();
    126  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (9x)
    144  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:<crypto::simd::fake::u32x4 as crypto::aessafe::AesBitValueOps>::ror3 (9x)
      .  
    594          Bs8State(x0out, x1out, x2out, x3out, x4out, x5out, x6out, x7out)
     18      }
      .  
    363      fn add_round_key(self, rk: &Bs8State<T>) -> Bs8State<T> {
  2,783          self.xor(*rk)
 37,873  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs:crypto::aessafe::Bs8State<T>::xor (121x)
  7,502  => ???:0x00000000001360f0 (242x)
    242      }
      .  }
      .  
      .  trait AesBitValueOps: BitXor<Output = Self> + BitAnd<Output = Self> + Not<Output = Self> + Default + Sized {
      .      fn shift_row(self) -> Self;
      .      fn inv_shift_row(self) -> Self;
      .      fn ror1(self) -> Self;
      .      fn ror2(self) -> Self;
      .      fn ror3(self) -> Self;
-- line 1133 ----------------------------------------
-- line 1165 ----------------------------------------
      .      }
      .  
      .      fn ror3(self) -> u16 {
      .          self >> 12 | self << 4
      .      }
      .  }
      .  
      .  impl u32x4 {
  4,928      fn lsh(self, s: u32) -> u32x4 {
  9,856          let u32x4(a0, a1, a2, a3) = self;
  8,624          u32x4(
 23,408              a0 << s,
 43,120              (a1 << s) | (a0 >> (32 - s)),
 40,656              (a2 << s) | (a1 >> (32 - s)),
 43,120              (a3 << s) | (a2 >> (32 - s)))
  3,696      }
      .  
  4,928      fn rsh(self, s: u32) -> u32x4 {
  9,856          let u32x4(a0, a1, a2, a3) = self;
  9,856          u32x4(
 50,512              (a0 >> s) | (a1 << (32 - s)),
 40,656              (a1 >> s) | (a2 << (32 - s)),
 41,888              (a2 >> s) | (a3 << (32 - s)),
 14,784              a3 >> s)
  3,696      }
      .  }
      .  
      .  impl Not for u32x4 {
      .      type Output = u32x4;
      .  
    880      fn not(self) -> u32x4 {
  5,280          self ^ U32X4_1
  6,160  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs:<crypto::simd::fake::u32x4 as core::ops::bit::BitXor>::bitxor (440x)
    880      }
      .  }
      .  
      .  impl Default for u32x4 {
      .      fn default() -> u32x4 {
      .          u32x4(0, 0, 0, 0)
      .      }
      .  }
      .  
      .  impl AesBitValueOps for u32x4 {
  1,600      fn shift_row(self) -> u32x4 {
  6,400          let u32x4(a0, a1, a2, a3) = self;
 28,000          u32x4(a0, a1 >> 8 | a1 << 24, a2 >> 16 | a2 << 16, a3 >> 24 | a3 << 8)
  1,600      }
      .  
    160      fn inv_shift_row(self) -> u32x4 {
    640          let u32x4(a0, a1, a2, a3) = self;
  2,800          u32x4(a0, a1 >> 24 | a1 << 8, a2 >> 16 | a2 << 16, a3 >> 8 | a3 << 24)
    160      }
      .  
  5,004      fn ror1(self) -> u32x4 {
 20,016          let u32x4(a0, a1, a2, a3) = self;
 10,008          u32x4(a1, a2, a3, a0)
  5,004      }
      .  
  1,584      fn ror2(self) -> u32x4 {
  6,336          let u32x4(a0, a1, a2, a3) = self;
  3,168          u32x4(a2, a3, a0, a1)
  1,584      }
      .  
    144      fn ror3(self) -> u32x4 {
    576          let u32x4(a0, a1, a2, a3) = self;
    288          u32x4(a3, a0, a1, a2)
    144      }
      .  }

100,667  <counts for unidentified lines in /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/add.rs
--------------------------------------------------------------------------------
Ir     

     .  use crate::big_digit::{BigDigit, DoubleBigDigit, BITS};
     .  
     .  // Add with carry:
     .  #[inline]
 7,832  pub fn adc(a: BigDigit, b: BigDigit, acc: &mut DoubleBigDigit) -> BigDigit {
29,370      *acc += a as DoubleBigDigit;
27,412      *acc += b as DoubleBigDigit;
 3,916      let lo = *acc as BigDigit;
19,580      *acc >>= BITS;
     .      lo
 3,916  }
     .  
     .  // Only for the Add impl:
     .  #[inline]
 3,510  pub fn __add2(a: &mut [BigDigit], b: &[BigDigit]) -> BigDigit {
 3,510      debug_assert!(a.len() >= b.len());
 6,240  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (780x)
     .  
 1,560      let mut carry = 0;
 6,240      let (a_lo, a_hi) = a.split_at_mut(b.len());
53,040  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::split_at_mut (390x)
 3,120  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (390x)
     .  
43,450      for (a, b) in a_lo.iter_mut().zip(b) {
186,180  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/zip.rs:<core::iter::adapters::zip::Zip<A,B> as core::iter::traits::iterator::Iterator>::next (1,780x)
135,330  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::zip (390x)
33,930  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter_mut (390x)
 8,190  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (390x)
 5,070  => ???:0x00000000001360f0 (390x)
 9,730          *a = adc(*a, *b, &mut carry);
73,670  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/add.rs:num_bigint_dig::algorithms::add::adc (1,390x)
     .      }
     .  
 2,338      if carry != 0 {
    42          for a in a_hi {
   236  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::slice::IterMut<T> as core::iter::traits::iterator::Iterator>::next (2x)
   194  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::iter::traits::collect::IntoIterator for &mut [T]>::into_iter (2x)
    14              *a = adc(*a, 0, &mut carry);
   106  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/add.rs:num_bigint_dig::algorithms::add::adc (2x)
     8              if carry == 0 {
     2                  break;
     .              }
     .          }
     .      }
     .  
   390      carry as BigDigit
   780  }
     .  
     .  /// /Two argument addition of raw slices:
     .  /// a += b
     .  ///
     .  /// The caller _must_ ensure that a is big enough to store the result - typically this means
     .  /// resizing a to max(a.len(), b.len()) + 1, to fit a possible carry.
 1,285  pub fn add2(a: &mut [BigDigit], b: &[BigDigit]) {
   771      let carry = __add2(a, b);
243,515  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/add.rs:num_bigint_dig::algorithms::add::__add2 (257x)
     .  
 1,285      debug_assert!(carry == 0);
   514  }

16,359  <counts for unidentified lines in /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/add.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/mul.rs
--------------------------------------------------------------------------------
Ir     

-- line 5 ----------------------------------------
     .  #[inline]
     .  pub fn mul_with_carry(a: BigDigit, b: BigDigit, acc: &mut DoubleBigDigit) -> BigDigit {
     .      *acc += (a as DoubleBigDigit) * (b as DoubleBigDigit);
     .      let lo = *acc as BigDigit;
     .      *acc >>= BITS;
     .      lo
     .  }
     .  
 4,782  pub fn mul3(x: &[BigDigit], y: &[BigDigit]) -> BigUint {
19,925      let len = x.len() + y.len() + 1;
12,752  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (1,594x)
 5,579      let mut prod = BigUint {
 2,391          data: smallvec![0; len],
1,327,852  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::from_elem (797x)
     .      };
     .  
12,752      mac3(&mut prod.data[..], x, y);
3,963,990  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/mac.rs:num_bigint_dig::algorithms::mac::mac3 (797x)
115,160  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::IndexMut<I>>::index_mut (797x)
 8,767      prod.normalized()
559,075  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::normalized (797x)
 3,188  }
     .  
     .  pub fn scalar_mul(a: &mut [BigDigit], b: BigDigit) -> BigDigit {
     .      let mut carry = 0;
     .      for a in a.iter_mut() {
     .          *a = mul_with_carry(*a, b, &mut carry);
     .      }
     .      carry as BigDigit
     .  }
-- line 29 ----------------------------------------

 6,376  <counts for unidentified lines in /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/mul.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/cmp.rs
--------------------------------------------------------------------------------
Ir     

     .  use core::cmp::Ordering::{self, Equal, Greater, Less};
     .  
     .  use crate::big_digit::BigDigit;
     .  
 4,527  pub fn cmp_slice(a: &[BigDigit], b: &[BigDigit]) -> Ordering {
 4,527      debug_assert!(a.last() != Some(&0));
44,490  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:<core::option::Option<T> as core::cmp::PartialEq>::ne (503x)
 8,476  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::last (503x)
 5,030      debug_assert!(b.last() != Some(&0));
45,270  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:<core::option::Option<T> as core::cmp::PartialEq>::ne (503x)
 8,551  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::last (503x)
     .  
 6,036      let (a_len, b_len) = (a.len(), b.len());
 8,048  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (1,006x)
 2,012      if a_len < b_len {
   542          return Less;
     .      }
 1,433      if a_len > b_len {
    26          return Greater;
     .      }
     .  
32,451      for (&ai, &bi) in a.iter().rev().zip(b.iter().rev()) {
266,279  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/zip.rs:<core::iter::adapters::zip::Zip<A,B> as core::iter::traits::iterator::Iterator>::next (826x)
81,606  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter (938x)
30,016  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::zip (469x)
17,822  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::rev (938x)
 9,849  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (469x)
 6,097  => ???:0x00000000001360f0 (469x)
 3,292          if ai < bi {
   789              return Less;
     .          }
 1,357          if ai > bi {
   286              return Greater;
     .          }
     .      }
     3      Equal
 1,512  }
     .  
     .  #[cfg(test)]
     .  mod tests {
     .      use crate::BigUint;
     .  
     .      use num_traits::Num;
     .  
     .      #[test]
-- line 34 ----------------------------------------

10,243  <counts for unidentified lines in /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.71/src/unix/linux_like/linux/mod.rs
--------------------------------------------------------------------------------
Ir     

-- line 2644 ----------------------------------------
     .          let size_in_bits
     .              = 8 * ::mem::size_of_val(&cpuset.bits[0]); // 32, 64 etc
     .          let (idx, offset) = (cpu / size_in_bits, cpu % size_in_bits);
     .          cpuset.bits[idx] &= !(1 << offset);
     .          ()
     .      }
     .  
     .      pub fn CPU_ISSET(cpu: usize, cpuset: &cpu_set_t) -> bool {
13,312          let size_in_bits = 8 * ::mem::size_of_val(&cpuset.bits[0]);
 8,192  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/mem/mod.rs:core::mem::size_of_val (1,024x)
24,576          let (idx, offset) = (cpu / size_in_bits, cpu % size_in_bits);
23,552          0 != (cpuset.bits[idx] & (1 << offset))
     .      }
     .  
     .      pub fn CPU_COUNT_S(size: usize, cpuset: &cpu_set_t) -> ::c_int {
     .          let mut s: u32 = 0;
     .          let size_of_mask = ::mem::size_of_val(&cpuset.bits[0]);
     .          for i in cpuset.bits[..(size / size_of_mask)].iter() {
     .              s += i.count_ones();
     .          };
-- line 2662 ----------------------------------------

10,240  <counts for unidentified lines in /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.71/src/unix/linux_like/linux/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs
--------------------------------------------------------------------------------
Ir     

-- line 85 ----------------------------------------
     .  use crate::algorithms::{div_rem, div_rem_digit, mac_with_carry, mul3, scalar_mul};
     .  use crate::algorithms::{extended_gcd, mod_inverse};
     .  use crate::traits::{ExtendedGcd, ModInverse};
     .  
     .  use ParseBigIntError;
     .  use UsizePromotion;
     .  
     .  /// A big unsigned integer type.
 3,663  #[derive(Clone, Debug)]
 4,329  => ???:0x00000000001360f0 (333x)
   315  #[cfg_attr(feature = "zeroize", derive(Zeroize))]
112,171  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.1.0/src/lib.rs:<[Z] as zeroize::Zeroize>::zeroize (35x)
 3,605  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::DerefMut>::deref_mut (35x)
     .  pub struct BigUint {
 1,998      pub(crate) data: SmallVec<[BigDigit; VEC_SIZE]>,
1,800,987  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::clone::Clone>::clone (333x)
     .  }
     .  
     .  impl PartialEq for BigUint {
     .      #[inline]
     3      fn eq(&self, other: &BigUint) -> bool {
     2          match self.cmp(other) {
12,511  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as core::cmp::Ord>::cmp (1x)
     4              Equal => true,
     .              _ => false,
     .          }
     5      }
     .  }
     .  impl Eq for BigUint {}
     .  
     .  impl Hash for BigUint {
     .      fn hash<H: Hasher>(&self, state: &mut H) {
     .          self.data.hash(state);
     .      }
     .  }
     .  
     .  impl PartialOrd for BigUint {
     .      #[inline]
    72      fn partial_cmp(&self, other: &BigUint) -> Option<Ordering> {
    72          Some(self.cmp(other))
29,963  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as core::cmp::Ord>::cmp (24x)
    72      }
     .  }
     .  
     .  impl Ord for BigUint {
     .      #[inline]
   875      fn cmp(&self, other: &BigUint) -> Ordering {
 1,925          cmp_slice(&self.data[..], &other.data[..])
214,841  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/cmp.rs:num_bigint_dig::algorithms::cmp::cmp_slice (175x)
51,570  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (350x)
   350      }
     .  }
     .  
     .  impl Default for BigUint {
     .      #[inline]
     .      fn default() -> BigUint {
     .          Zero::zero()
     .      }
     .  }
-- line 135 ----------------------------------------
-- line 172 ----------------------------------------
     .      #[inline]
     .      fn from_str(s: &str) -> Result<BigUint, ParseBigIntError> {
     .          BigUint::from_str_radix(s, 10)
     .      }
     .  }
     .  
     .  // Convert from a power of two radix (bits == ilog2(radix)) where bits evenly divides
     .  // BigDigit::BITS
    84  fn from_bitwise_digits_le(v: &[u8], bits: usize) -> BigUint {
   532      debug_assert!(!v.is_empty() && bits <= 8 && big_digit::BITS % bits == 0);
   294  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::is_empty (14x)
64,988      debug_assert!(v.iter().all(|&c| (c as BigDigit) < (1 << bits)));
403,708  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::slice::Iter<T> as core::iter::traits::iterator::Iterator>::all (14x)
 1,204  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter (14x)
     .  
   182      let digits_per_big_digit = big_digit::BITS / bits;
     .  
   182      let data = v
562,397  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::collect (12x)
70,880  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::collect'2 (2x)
   462  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::map (14x)
   350  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::chunks (14x)
     .          .chunks(digits_per_big_digit)
 1,483          .map(|chunk| {
 3,783              chunk
372,588  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Rev<I> as core::iter::traits::iterator::Iterator>::fold (291x)
25,026  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter (291x)
 5,529  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::rev (291x)
     .                  .iter()
     .                  .rev()
58,407                  .fold(0, |acc, &c| (acc << bits) | c as BigDigit)
   582          })
     .          .collect();
     .  
   154      BigUint::new_native(data)
 3,204  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::new_native (14x)
   182  => ???:0x00000000001360f0 (14x)
    28  }
     .  
     .  // Convert from a power of two radix (bits == ilog2(radix)) where bits doesn't evenly divide
     .  // BigDigit::BITS
     .  fn from_inexact_bitwise_digits_le(v: &[u8], bits: usize) -> BigUint {
     .      debug_assert!(!v.is_empty() && bits <= 8 && big_digit::BITS % bits != 0);
     .      debug_assert!(v.iter().all(|&c| (c as BigDigit) < (1 << bits)));
     .  
     .      let big_digits = (v.len() * bits + big_digit::BITS - 1) / big_digit::BITS;
-- line 205 ----------------------------------------
-- line 415 ----------------------------------------
     .          self.normalize();
     .      }
     .  }
     .  
     .  impl Shl<usize> for BigUint {
     .      type Output = BigUint;
     .  
     .      #[inline]
    12      fn shl(self, rhs: usize) -> BigUint {
   100          biguint_shl(Cow::Owned(self), rhs)
37,850  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/shl.rs:num_bigint_dig::algorithms::shl::biguint_shl (4x)
   104  => ???:0x00000000001360f0 (8x)
     8      }
     .  }
     .  impl<'a> Shl<usize> for &'a BigUint {
     .      type Output = BigUint;
     .  
     .      #[inline]
   104      fn shl(self, rhs: usize) -> BigUint {
   130          biguint_shl(Cow::Borrowed(self), rhs)
302,099  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/shl.rs:num_bigint_dig::algorithms::shl::biguint_shl (26x)
    52      }
     .  }
     .  
     .  impl ShlAssign<usize> for BigUint {
     .      #[inline]
     .      fn shl_assign(&mut self, rhs: usize) {
     .          let n = mem::replace(self, BigUint::zero());
     .          *self = n << rhs;
     .      }
     .  }
     .  
     .  impl Shr<usize> for BigUint {
     .      type Output = BigUint;
     .  
     .      #[inline]
    39      fn shr(self, rhs: usize) -> BigUint {
   325          biguint_shr(Cow::Owned(self), rhs)
93,837  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/shr.rs:num_bigint_dig::algorithms::shr::biguint_shr (13x)
   338  => ???:0x00000000001360f0 (26x)
    26      }
     .  }
     .  impl<'a> Shr<usize> for &'a BigUint {
     .      type Output = BigUint;
     .  
     .      #[inline]
     .      fn shr(self, rhs: usize) -> BigUint {
     .          biguint_shr(Cow::Borrowed(self), rhs)
     .      }
-- line 458 ----------------------------------------
-- line 463 ----------------------------------------
     .      fn shr_assign(&mut self, rhs: usize) {
     .          let n = mem::replace(self, BigUint::zero());
     .          *self = n >> rhs;
     .      }
     .  }
     .  
     .  impl Zero for BigUint {
     .      #[inline]
   164      fn zero() -> BigUint {
   574          BigUint::new(Vec::new())
90,282  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::new (82x)
   574  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:alloc::vec::Vec<T>::new (82x)
   164      }
     .  
     .      #[inline]
 2,854      fn is_zero(&self) -> bool {
 2,854          self.data.is_empty()
122,023  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::is_empty (1,427x)
 5,708      }
     .  }
     .  
     .  impl One for BigUint {
     .      #[inline]
   166      fn one() -> BigUint {
 1,114          BigUint::new(vec![1])
179,695  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::new (83x)
20,382  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/alloc.rs:alloc::alloc::exchange_malloc (79x)
12,245  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/slice.rs:alloc::slice::<impl [T]>::into_vec (79x)
   166      }
     .  
     .      #[inline]
     6      fn is_one(&self) -> bool {
    18          self.data[..] == [1]
   440  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/array/mod.rs:core::array::<impl core::cmp::PartialEq<[A; N]> for [B]>::eq (2x)
   302  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (2x)
     8      }
     .  }
     .  
     .  impl Unsigned for BigUint {}
     .  
     .  macro_rules! pow_impl {
     .      ($T:ty) => {
     .          impl<'a> Pow<$T> for &'a BigUint {
     .              type Output = BigUint;
-- line 498 ----------------------------------------
-- line 545 ----------------------------------------
     .  pow_impl!(u128);
     .  
     .  forward_all_binop_to_val_ref_commutative!(impl Add for BigUint, add);
     .  forward_val_assign!(impl AddAssign for BigUint, add_assign);
     .  
     .  impl<'a> Add<&'a BigUint> for BigUint {
     .      type Output = BigUint;
     .  
   532      fn add(mut self, other: &BigUint) -> BigUint {
   798          self += other;
402,261  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as core::ops::arith::AddAssign<&num_bigint_dig::biguint::BigUint>>::add_assign (133x)
   665          self
 1,729  => ???:0x00000000001360f0 (133x)
   266      }
     .  }
     .  impl<'a> AddAssign<&'a BigUint> for BigUint {
     .      #[inline]
   399      fn add_assign(&mut self, other: &BigUint) {
   931          let self_len = self.data.len();
 9,821  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (133x)
   798          let carry = if self_len < other.data.len() {
 9,773  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (133x)
     .              let lo_carry = __add2(&mut self.data[..], &other.data[..self_len]);
     .              self.data.extend_from_slice(&other.data[self_len..]);
     .              __add2(&mut self.data[self_len..], &[lo_carry])
     .          } else {
 1,729              __add2(&mut self.data[..], &other.data[..])
337,719  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/add.rs:num_bigint_dig::algorithms::add::__add2 (133x)
19,615  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (133x)
19,348  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::IndexMut<I>>::index_mut (133x)
     .          };
   399          if carry != 0 {
     .              self.data.push(carry);
     .          }
   266      }
     .  }
     .  
     .  promote_unsigned_scalars!(impl Add for BigUint, add);
     .  promote_unsigned_scalars_assign!(impl AddAssign for BigUint, add_assign);
     .  forward_all_scalar_binop_to_val_val_commutative!(impl Add<u32> for BigUint, add);
     .  forward_all_scalar_binop_to_val_val_commutative!(impl Add<u64> for BigUint, add);
     .  #[cfg(has_i128)]
     .  forward_all_scalar_binop_to_val_val_commutative!(impl Add<u128> for BigUint, add);
-- line 580 ----------------------------------------
-- line 710 ----------------------------------------
     .  
     .  forward_val_val_binop!(impl Sub for BigUint, sub);
     .  forward_ref_ref_binop!(impl Sub for BigUint, sub);
     .  forward_val_assign!(impl SubAssign for BigUint, sub_assign);
     .  
     .  impl<'a> Sub<&'a BigUint> for BigUint {
     .      type Output = BigUint;
     .  
   831      fn sub(mut self, other: &BigUint) -> BigUint {
 2,216          self -= other;
1,182,703  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as core::ops::arith::SubAssign<&num_bigint_dig::biguint::BigUint>>::sub_assign (277x)
 1,385          self
 3,601  => ???:0x00000000001360f0 (277x)
   554      }
     .  }
     .  impl<'a> SubAssign<&'a BigUint> for BigUint {
 1,108      fn sub_assign(&mut self, other: &'a BigUint) {
 3,878          sub2(&mut self.data[..], &other.data[..]);
1,014,898  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/sub.rs:num_bigint_dig::algorithms::sub::sub2 (277x)
41,043  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (277x)
40,525  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::IndexMut<I>>::index_mut (277x)
   277          self.normalize();
78,481  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::normalize (277x)
   554      }
     .  }
     .  
     .  impl<'a> Sub<BigUint> for &'a BigUint {
     .      type Output = BigUint;
     .  
    12      fn sub(self, mut other: BigUint) -> BigUint {
    40          let other_len = other.data.len();
   308  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (4x)
    32          if other_len < self.data.len() {
   292  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (4x)
    92              let lo_borrow = __sub2rev(&self.data[..other_len], &mut other.data);
 3,236  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/sub.rs:num_bigint_dig::algorithms::sub::__sub2rev (4x)
 1,156  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (4x)
   440  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::DerefMut>::deref_mut (4x)
    76              other.data.extend_from_slice(&self.data[other_len..]);
 6,620  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::extend_from_slice (4x)
 1,204  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (4x)
    12              if lo_borrow != 0 {
     .                  sub2(&mut other.data[other_len..], &[1])
     .              }
     .          } else {
     .              sub2rev(&self.data[..], &mut other.data[..]);
     .          }
    48          other.normalized()
   708  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::normalized (4x)
     8      }
     .  }
     .  
     .  promote_unsigned_scalars!(impl Sub for BigUint, sub);
     .  promote_unsigned_scalars_assign!(impl SubAssign for BigUint, sub_assign);
     .  forward_all_scalar_binop_to_val_val!(impl Sub<u32> for BigUint, sub);
     .  forward_all_scalar_binop_to_val_val!(impl Sub<u64> for BigUint, sub);
     .  #[cfg(has_i128)]
     .  forward_all_scalar_binop_to_val_val!(impl Sub<u128> for BigUint, sub);
-- line 753 ----------------------------------------
-- line 908 ----------------------------------------
     .  
     .  forward_all_binop_to_ref_ref!(impl Mul for BigUint, mul);
     .  forward_val_assign!(impl MulAssign for BigUint, mul_assign);
     .  
     .  impl<'a, 'b> Mul<&'b BigUint> for &'a BigUint {
     .      type Output = BigUint;
     .  
     .      #[inline]
 4,782      fn mul(self, other: &BigUint) -> BigUint {
10,361          mul3(&self.data[..], &other.data[..])
6,042,589  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/mul.rs:num_bigint_dig::algorithms::mul::mul3 (797x)
236,026  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (1,594x)
 1,594      }
     .  }
     .  
     .  impl<'a, 'b> Mul<&'a BigInt> for &'b BigUint {
     .      type Output = BigInt;
     .  
     .      #[inline]
     .      fn mul(self, other: &BigInt) -> BigInt {
     .          BigInt {
-- line 926 ----------------------------------------
-- line 1193 ----------------------------------------
     .  
     .  forward_all_binop_to_ref_ref!(impl Rem for BigUint, rem);
     .  forward_val_assign!(impl RemAssign for BigUint, rem_assign);
     .  
     .  impl<'a, 'b> Rem<&'b BigUint> for &'a BigUint {
     .      type Output = BigUint;
     .  
     .      #[inline]
    40      fn rem(self, other: &BigUint) -> BigUint {
   170          let (_, r) = self.div_rem(other);
6,578,313  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_integer::Integer>::div_rem (10x)
 5,604  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (10x)
     .          r
    20      }
     .  }
     .  impl<'a> RemAssign<&'a BigUint> for BigUint {
     .      #[inline]
     6      fn rem_assign(&mut self, other: &BigUint) {
    34          *self = &*self % other;
978,327  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<&num_bigint_dig::biguint::BigUint as core::ops::arith::Rem<&num_bigint_dig::biguint::BigUint>>::rem (2x)
 1,038  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (2x)
    26  => ???:0x00000000001360f0 (2x)
     4      }
     .  }
     .  
     .  promote_unsigned_scalars!(impl Rem for BigUint, rem);
     .  promote_unsigned_scalars_assign!(impl RemAssign for BigUint, rem_assign);
     .  forward_all_scalar_binop_to_val_val!(impl Rem<u32> for BigUint, rem);
     .  forward_all_scalar_binop_to_val_val!(impl Rem<u64> for BigUint, rem);
     .  #[cfg(has_i128)]
     .  forward_all_scalar_binop_to_val_val!(impl Rem<u128> for BigUint, rem);
-- line 1218 ----------------------------------------
-- line 1380 ----------------------------------------
     .          } else {
     .              Some(self.div(v))
     .          }
     .      }
     .  }
     .  
     .  impl Integer for BigUint {
     .      #[inline]
    50      fn div_rem(&self, other: &BigUint) -> (BigUint, BigUint) {
    10          div_rem(self, other)
6,578,223  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/div.rs:num_bigint_dig::algorithms::div::div_rem (10x)
    20      }
     .  
     .      #[inline]
     .      fn div_floor(&self, other: &BigUint) -> BigUint {
     .          let (d, _) = div_rem(self, other);
     .          d
     .      }
     .  
     .      #[inline]
     .      fn mod_floor(&self, other: &BigUint) -> BigUint {
     .          let (_, m) = div_rem(self, other);
     .          m
     .      }
     .  
     .      #[inline]
    25      fn div_mod_floor(&self, other: &BigUint) -> (BigUint, BigUint) {
     5          div_rem(self, other)
1,550,371  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/div.rs:num_bigint_dig::algorithms::div::div_rem (5x)
    10      }
     .  
     .      /// Calculates the Greatest Common Divisor (GCD) of the number and `other`.
     .      ///
     .      /// The result is always positive.
     .      #[inline]
     .      fn gcd(&self, other: &Self) -> Self {
     .          let (res, _, _) = extended_gcd(Cow::Borrowed(self), Cow::Borrowed(other), false);
     .          res.into_biguint().unwrap()
-- line 1415 ----------------------------------------
-- line 1430 ----------------------------------------
     .      /// Returns `true` if the number is a multiple of `other`.
     .      #[inline]
     .      fn is_multiple_of(&self, other: &BigUint) -> bool {
     .          (self % other).is_zero()
     .      }
     .  
     .      /// Returns `true` if the number is divisible by `2`.
     .      #[inline]
     8      fn is_even(&self) -> bool {
     .          // Considering only the last digit.
    24          match self.data.first() {
   424  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::Deref>::deref (4x)
    48  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::first (4x)
    56              Some(x) => x.is_even(),
    40  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-integer-0.1.43/src/lib.rs:<u64 as num_integer::Integer>::is_even (4x)
     .              None => true,
     .          }
    20      }
     .  
     .      /// Returns `true` if the number is not divisible by `2`.
     .      #[inline]
     8      fn is_odd(&self) -> bool {
    12          !self.is_even()
   628  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_integer::Integer>::is_even (4x)
    16      }
     .  }
     .  
     .  #[inline]
     .  fn fixpoint<F>(mut x: BigUint, max_bits: usize, f: F) -> BigUint
     .  where
     .      F: Fn(&BigUint) -> BigUint,
     .  {
     .      let mut xn = f(&x);
-- line 1458 ----------------------------------------
-- line 1733 ----------------------------------------
     .          if n >= 0 {
     .              Some(BigUint::from(n as u128))
     .          } else {
     .              None
     .          }
     .      }
     .  
     .      #[inline]
     6      fn from_u64(n: u64) -> Option<BigUint> {
    22          Some(BigUint::from(n))
 1,212  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as core::convert::From<u64>>::from (2x)
    26  => ???:0x00000000001360f0 (2x)
     4      }
     .  
     .      #[inline]
     .      #[cfg(has_i128)]
     .      fn from_u128(n: u128) -> Option<BigUint> {
     .          Some(BigUint::from(n))
     .      }
     .  
     .      #[inline]
-- line 1751 ----------------------------------------
-- line 1793 ----------------------------------------
     .  
     .          ret
     .      }
     .  }
     .  
     .  #[cfg(feature = "u64_digit")]
     .  impl From<u64> for BigUint {
     .      #[inline]
    18      fn from(n: u64) -> Self {
   156          BigUint::new_native(smallvec![n])
 1,392  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::new_native (6x)
   856  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::push (4x)
   372  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::new (4x)
    52  => ???:0x00000000001360f0 (4x)
    36  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::inline_size (4x)
    12      }
     .  }
     .  
     .  #[cfg(has_i128)]
     .  impl From<u128> for BigUint {
     .      #[inline]
     .      fn from(mut n: u128) -> Self {
     .          let mut ret: BigUint = Zero::zero();
     .  
-- line 1811 ----------------------------------------
-- line 1893 ----------------------------------------
     .  impl_to_biguint!(u64, FromPrimitive::from_u64);
     .  #[cfg(has_i128)]
     .  impl_to_biguint!(u128, FromPrimitive::from_u128);
     .  
     .  impl_to_biguint!(f32, FromPrimitive::from_f32);
     .  impl_to_biguint!(f64, FromPrimitive::from_f64);
     .  
     .  // Extract bitwise digits that evenly divide BigDigit
    45  fn to_bitwise_digits_le(u: &BigUint, bits: usize) -> Vec<u8> {
   315      debug_assert!(!u.is_zero() && bits <= 8 && big_digit::BITS % bits == 0);
   854  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::Zero>::is_zero (9x)
     .  
    99      let last_i = u.data.len() - 1;
   665  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (9x)
   153      let mask: BigDigit = (1 << bits) - 1;
   108      let digits_per_big_digit = big_digit::BITS / bits;
   198      let digits = (u.bits() + bits - 1) / bits;
 3,390  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::bits (9x)
    18      let mut res = Vec::with_capacity(digits);
10,643  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:alloc::vec::Vec<T>::with_capacity (9x)
     .  
 3,920      for mut r in u.data[..last_i].iter().cloned() {
34,800  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Cloned<I> as core::iter::traits::iterator::Iterator>::next (194x)
 2,609  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (9x)
    63  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (9x)
   783  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter (9x)
   171  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::cloned (9x)
31,265          for _ in 0..digits_per_big_digit {
289,710  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/range.rs:core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next (1,665x)
 1,295  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (185x)
16,280              res.push((r & mask) as u8);
165,760  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:alloc::vec::Vec<T>::push (1,480x)
17,760              r >>= bits;
     .          }
     .      }
     .  
    81      let mut r = u.data[last_i];
 1,484  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (9x)
   201      while r != 0 {
   671          res.push((r & mask) as u8);
 6,832  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:alloc::vec::Vec<T>::push (61x)
   732          r >>= bits;
     .      }
     .  
     .      res
    18  }
     .  
     .  // Extract bitwise digits that don't evenly divide BigDigit
     .  fn to_inexact_bitwise_digits_le(u: &BigUint, bits: usize) -> Vec<u8> {
     .      debug_assert!(!u.is_zero() && bits <= 8 && big_digit::BITS % bits != 0);
     .  
     .      let mask: BigDigit = (1 << bits) - 1;
     .      let digits = (u.bits() + bits - 1) / bits;
     .      let mut res = Vec::with_capacity(digits);
-- line 1932 ----------------------------------------
-- line 2038 ----------------------------------------
     .  #[cfg(not(feature = "u64_digit"))]
     .  #[inline]
     .  fn ensure_big_digit(raw: Vec<u32>) -> SmallVec<[BigDigit; VEC_SIZE]> {
     .      raw.into()
     .  }
     .  
     .  #[cfg(feature = "u64_digit")]
     .  #[inline]
   330  fn ensure_big_digit(raw: Vec<u32>) -> SmallVec<[BigDigit; VEC_SIZE]> {
 1,650      ensure_big_digit_slice(&raw)
171,166  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::ensure_big_digit_slice (165x)
11,880  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:<alloc::vec::Vec<T> as core::ops::deref::Deref>::deref (165x)
   495  }
42,542  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (165x)
     .  
     .  #[cfg(feature = "u64_digit")]
     .  #[inline]
   724  fn ensure_big_digit_slice(raw: &[u32]) -> SmallVec<[BigDigit; VEC_SIZE]> {
 1,991      raw.chunks(2)
168,076  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::collect (181x)
 5,430  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::map (181x)
 4,525  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::chunks (181x)
   332          .map(|chunk| {
     .              // raw could have odd length
   747              if chunk.len() < 2 {
   664  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (83x)
   581                  chunk[0] as BigDigit
     .              } else {
     .                  BigDigit::from(chunk[0]) | (BigDigit::from(chunk[1]) << 32)
     .              }
   249          })
     .          .collect()
   362  }
     .  
     .  impl BigUint {
     .      /// Creates and initializes a `BigUint`.
     .      ///
     .      /// The digits are in little-endian base 2<sup>32</sup>.
     .      #[inline]
   330      pub fn new(digits: Vec<u32>) -> BigUint {
 2,145          Self::new_native(ensure_big_digit(digits))
229,053  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::ensure_big_digit (165x)
37,624  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::new_native (165x)
   330      }
     .  
     .      /// Creates and initializes a `BigUint`.
     .      ///
     .      /// The digits are in little-endian base matching `BigDigit`.
     .      #[inline]
   452      pub fn new_native(digits: SmallVec<[BigDigit; VEC_SIZE]>) -> BigUint {
 4,520          BigUint { data: digits }.normalized()
40,042  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::normalized (226x)
 5,876  => ???:0x00000000001360f0 (452x)
   452      }
     .  
     .      /// Creates and initializes a `BigUint`.
     .      ///
     .      /// The digits are in little-endian base 2<sup>32</sup>.
     .      #[inline]
     .      pub fn from_slice(slice: &[u32]) -> BigUint {
     .          BigUint::new(slice.to_vec())
     .      }
-- line 2088 ----------------------------------------
-- line 2104 ----------------------------------------
     .      /// The digits are in little-endian base 2<sup>32</sup>.
     .      #[cfg(not(feature = "u64_digit"))]
     .      #[inline]
     .      pub fn assign_from_slice(&mut self, slice: &[u32]) {
     .          self.assign_from_slice_native(slice);
     .      }
     .      #[cfg(feature = "u64_digit")]
     .      #[inline]
    64      pub fn assign_from_slice(&mut self, slice: &[u32]) {
    64          let slice_digits = ensure_big_digit_slice(slice);
10,304  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::ensure_big_digit_slice (16x)
   128          self.assign_from_slice_native(&slice_digits);
12,336  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::assign_from_slice_native (16x)
 1,760  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::Deref>::deref (16x)
    64      }
 3,056  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (16x)
     .  
     .      /// Assign a value to a `BigUint`.
     .      ///
     .      /// The digits are in little-endian with the base matching `BigDigit`.
     .      #[inline]
    64      pub fn assign_from_slice_native(&mut self, slice: &[BigDigit]) {
   160          self.data.resize(slice.len(), 0);
 3,136  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::resize (16x)
   128  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (16x)
    80          self.data.clone_from_slice(slice);
 4,512  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::clone_from_slice (16x)
 1,760  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::DerefMut>::deref_mut (16x)
    16          self.normalize();
 2,288  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::normalize (16x)
    32      }
     .  
     .      /// Creates and initializes a `BigUint`.
     .      ///
     .      /// The bytes are in big-endian byte order.
     .      ///
     .      /// # Examples
     .      ///
     .      /// ```
-- line 2133 ----------------------------------------
-- line 2138 ----------------------------------------
     .      /// assert_eq!(BigUint::from_bytes_be(b"AA"),
     .      ///            BigUint::parse_bytes(b"16705", 10).unwrap());
     .      /// assert_eq!(BigUint::from_bytes_be(b"AB"),
     .      ///            BigUint::parse_bytes(b"16706", 10).unwrap());
     .      /// assert_eq!(BigUint::from_bytes_be(b"Hello world!"),
     .      ///            BigUint::parse_bytes(b"22405534230753963835153736737", 10).unwrap());
     .      /// ```
     .      #[inline]
    70      pub fn from_bytes_be(bytes: &[u8]) -> BigUint {
   168          if bytes.is_empty() {
   294  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::is_empty (14x)
     .              Zero::zero()
     .          } else {
    70              let mut v = bytes.to_vec();
25,016  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/slice.rs:alloc::slice::<impl [T]>::to_vec (14x)
   154              v.reverse();
58,842  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::reverse (14x)
 1,008  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:<alloc::vec::Vec<T> as core::ops::deref::DerefMut>::deref_mut (14x)
   112              BigUint::from_bytes_le(&*v)
1,044,795  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::from_bytes_le (14x)
 1,008  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:<alloc::vec::Vec<T> as core::ops::deref::Deref>::deref (14x)
    28          }
 5,502  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (14x)
    28      }
     .  
     .      /// Creates and initializes a `BigUint`.
     .      ///
     .      /// The bytes are in little-endian byte order.
     .      #[inline]
    70      pub fn from_bytes_le(bytes: &[u8]) -> BigUint {
   154          if bytes.is_empty() {
   294  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::is_empty (14x)
     .              Zero::zero()
     .          } else {
    42              from_bitwise_digits_le(bytes, 8)
1,044,137  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::from_bitwise_digits_le (14x)
     .          }
    28      }
     .  
     .      /// Creates and initializes a `BigUint`. The input slice must contain
     .      /// ascii/utf8 characters in [0-9a-zA-Z].
     .      /// `radix` must be in the range `2...36`.
     .      ///
     .      /// The function `from_str_radix` from the `Num` trait provides the same logic
     .      /// for `&str` buffers.
     .      ///
-- line 2174 ----------------------------------------
-- line 2280 ----------------------------------------
     .      ///
     .      /// ```
     .      /// use num_bigint_dig::BigUint;
     .      ///
     .      /// let i = BigUint::parse_bytes(b"1125", 10).unwrap();
     .      /// assert_eq!(i.to_bytes_be(), vec![4, 101]);
     .      /// ```
     .      #[inline]
    45      pub fn to_bytes_be(&self) -> Vec<u8> {
    18          let mut v = self.to_bytes_le();
595,713  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::to_bytes_le (9x)
    99          v.reverse();
40,559  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::reverse (9x)
   648  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:<alloc::vec::Vec<T> as core::ops::deref::DerefMut>::deref_mut (9x)
     .          v
    18      }
     .  
     .      /// Returns the byte representation of the `BigUint` in little-endian byte order.
     .      ///
     .      /// # Examples
     .      ///
     .      /// ```
     .      /// use num_bigint_dig::BigUint;
     .      ///
     .      /// let i = BigUint::parse_bytes(b"1125", 10).unwrap();
     .      /// assert_eq!(i.to_bytes_le(), vec![101, 4]);
     .      /// ```
     .      #[inline]
    36      pub fn to_bytes_le(&self) -> Vec<u8> {
    81          if self.is_zero() {
   854  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::Zero>::is_zero (9x)
     .              vec![0]
     .          } else {
    27              to_bitwise_digits_le(self, 8)
594,661  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::to_bitwise_digits_le (9x)
     .          }
    18      }
     .  
     .      /// Returns the integer formatted as a string in the given radix.
     .      /// `radix` must be in the range `2...36`.
     .      ///
     .      /// # Examples
     .      ///
     .      /// ```
     .      /// use num_bigint_dig::BigUint;
-- line 2319 ----------------------------------------
-- line 2365 ----------------------------------------
     .      /// ```
     .      #[inline]
     .      pub fn to_radix_le(&self, radix: u32) -> Vec<u8> {
     .          to_radix_le(self, radix)
     .      }
     .  
     .      /// Determines the fewest bits necessary to express the `BigUint`.
     .      #[inline]
    39      pub fn bits(&self) -> usize {
    65          if self.is_zero() {
 1,230  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::Zero>::is_zero (13x)
     .              return 0;
     .          }
   182          let zeros = self.data.last().unwrap().leading_zeros();
 1,386  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::Deref>::deref (13x)
   221  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::last (13x)
   195  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::unwrap (13x)
   182  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::leading_zeros (13x)
   234          self.data.len() * big_digit::BITS - zeros as usize
   957  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (13x)
    52      }
     .  
     .      /// Strips off trailing zero bigdigits - comparisons require the last element in the vector to
     .      /// be nonzero.
     .      #[inline]
 9,449      pub(crate) fn normalize(&mut self) {
55,831          while let Some(&0) = self.data.last() {
414,284  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::Deref>::deref (3,872x)
65,174  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::last (3,872x)
 4,026              self.data.pop();
332,687  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::pop (2,013x)
     .          }
 3,718      }
     .  
     .      /// Returns a normalized `BigUint`.
     .      #[inline]
 3,897      pub(crate) fn normalized(mut self) -> BigUint {
 5,196          self.normalize();
697,100  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::normalize (1,299x)
 6,495          self
16,887  => ???:0x00000000001360f0 (1,299x)
 2,598      }
     .  
     .      /// Returns `(self ^ exponent) % modulus`.
     .      ///
     .      /// Panics if the modulus is zero.
    20      pub fn modpow(&self, exponent: &Self, modulus: &Self) -> Self {
    64          assert!(!modulus.is_zero(), "divide by zero!");
   376  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::Zero>::is_zero (4x)
     .  
     .          // For an odd modulus, we can use Montgomery multiplication in base 2^32.
    20          if modulus.is_odd() {
   668  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_integer::Integer>::is_odd (4x)
    12              return monty_modpow(self, exponent, modulus);
628,203,266  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::monty_modpow (4x)
     .          }
     .  
     .          // Otherwise do basically the same as `num::pow`, but with a modulus.
     .          let one = BigUint::one();
     .          if exponent.is_zero() {
     .              return one;
     .          }
     .  
-- line 2413 ----------------------------------------
-- line 2425 ----------------------------------------
     .          while exp > one {
     .              exp >>= 1;
     .              base = &base * &base % modulus;
     .              if exp.is_odd() {
     .                  acc = acc * &base % modulus;
     .              }
     .          }
     .          acc
     8      }
     .  
     .      /// Returns the truncated principal square root of `self` --
     .      /// see [Roots::sqrt](https://docs.rs/num-integer/0.1/num_integer/trait.Roots.html#method.sqrt)
     .      pub fn sqrt(&self) -> Self {
     .          Roots::sqrt(self)
     .      }
     .  
     .      /// Returns the truncated principal cube root of `self` --
-- line 2441 ----------------------------------------
-- line 2450 ----------------------------------------
     .          Roots::nth_root(self, n)
     .      }
     .  
     .      pub fn trailing_zeros(&self) -> Option<usize> {
     .          trailing_zeros(self)
     .      }
     .  
     .      /// Sets the value to the provided digit, reusing internal storage.
 2,660      pub fn set_digit(&mut self, digit: BigDigit) {
 2,660          if self.is_zero() {
50,264  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::Zero>::is_zero (532x)
    48              self.data.resize(1, digit);
 8,808  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::resize (12x)
     .          } else {
 2,080              self.data.resize(1, 0);
257,452  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::resize (520x)
 2,600              self.data[0] = digit;
84,084  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::IndexMut<I>>::index_mut (520x)
     .          }
 1,064      }
     .  }
     .  
     .  /// Returns the number of least-significant bits that are zero,
     .  /// or `None` if the entire number is zero.
     .  pub fn trailing_zeros(u: &BigUint) -> Option<usize> {
     .      u.data
     .          .iter()
     .          .enumerate()
-- line 2473 ----------------------------------------
-- line 2483 ----------------------------------------
     .      fn digits_mut(&mut self) -> &mut SmallVec<[BigDigit; VEC_SIZE]>;
     .      fn normalize(&mut self);
     .      fn capacity(&self) -> usize;
     .      fn len(&self) -> usize;
     .  }
     .  
     .  impl IntDigits for BigUint {
     .      #[inline]
   660      fn digits(&self) -> &[BigDigit] {
   990          &self.data
35,156  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::Deref>::deref (330x)
   660      }
     .      #[inline]
     4      fn digits_mut(&mut self) -> &mut SmallVec<[BigDigit; VEC_SIZE]> {
     .          &mut self.data
     6      }
     .      #[inline]
     .      fn normalize(&mut self) {
     .          self.normalize();
     .      }
     .      #[inline]
     .      fn capacity(&self) -> usize {
     .          self.data.capacity()
     .      }
     .      #[inline]
   940      fn len(&self) -> usize {
   940          self.data.len()
34,566  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (470x)
   940      }
     .  }
     .  
     .  /// Combine four `u32`s into a single `u128`.
     .  #[cfg(has_i128)]
     .  #[inline]
     .  #[allow(dead_code)]
     .  fn u32_to_u128(a: u32, b: u32, c: u32, d: u32) -> u128 {
     .      u128::from(d) | (u128::from(c) << 32) | (u128::from(b) << 64) | (u128::from(a) << 96)
-- line 2517 ----------------------------------------
-- line 3267 ----------------------------------------
     .          assert_eq!(u32_to_u128(a, b, c, d), *val);
     .      }
     .  }
     .  
     .  // Mod Inverse
     .  
     .  impl<'a> ModInverse<&'a BigUint> for BigUint {
     .      type Output = BigInt;
     6      fn mod_inverse(self, m: &'a BigUint) -> Option<BigInt> {
    56          mod_inverse(Cow::Owned(self), Cow::Borrowed(m))
8,494,709  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/mod_inverse.rs:num_bigint_dig::algorithms::mod_inverse::mod_inverse (2x)
    52  => ???:0x00000000001360f0 (4x)
     4      }
     .  }
     .  
     .  impl ModInverse<BigUint> for BigUint {
     .      type Output = BigInt;
     .      fn mod_inverse(self, m: BigUint) -> Option<BigInt> {
     .          mod_inverse(Cow::Owned(self), Cow::Owned(m))
     .      }
     .  }
-- line 3285 ----------------------------------------

57,450  <counts for unidentified lines in /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/mac.rs
--------------------------------------------------------------------------------
Ir      

-- line 3 ----------------------------------------
      .  
      .  use crate::algorithms::{adc, add2, sub2, sub_sign};
      .  use crate::big_digit::{BigDigit, DoubleBigDigit, BITS};
      .  use crate::bigint::Sign::{Minus, NoSign, Plus};
      .  use crate::biguint::IntDigits;
      .  use crate::{BigInt, BigUint};
      .  
      .  #[inline]
 55,300  pub fn mac_with_carry(a: BigDigit, b: BigDigit, c: BigDigit, acc: &mut DoubleBigDigit) -> BigDigit {
199,080      *acc += a as DoubleBigDigit;
254,380      *acc += (b as DoubleBigDigit) * (c as DoubleBigDigit);
 22,120      let lo = *acc as BigDigit;
110,600      *acc >>= BITS;
      .      lo
 22,120  }
      .  
      .  /// Three argument multiply accumulate:
      .  /// acc += b * c
  5,220  pub fn mac_digit(acc: &mut [BigDigit], b: &[BigDigit], c: BigDigit) {
  6,090      if c == 0 {
      .          return;
      .      }
      .  
  3,480      let mut carry = 0;
 13,920      let (a_lo, a_hi) = acc.split_at_mut(b.len());
118,320  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::split_at_mut (870x)
  6,960  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (870x)
      .  
283,090      for (a, &b) in a_lo.iter_mut().zip(b) {
1,394,310  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/zip.rs:<core::iter::adapters::zip::Zip<A,B> as core::iter::traits::iterator::Iterator>::next (11,930x)
301,890  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::zip (870x)
 75,690  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter_mut (870x)
 18,270  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (870x)
 11,310  => ???:0x00000000001360f0 (870x)
 88,480          *a = mac_with_carry(*a, b, c, &mut carry);
741,020  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/mac.rs:num_bigint_dig::algorithms::mac::mac_with_carry (11,060x)
      .      }
      .  
  6,090      let mut a = a_hi.iter_mut();
 75,690  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter_mut (870x)
  8,050      while carry != 0 {
  4,528          let a = a.next().expect("carry overflow during multiplication!");
 66,788  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::slice::IterMut<T> as core::iter::traits::iterator::Iterator>::next (566x)
 10,754  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::expect (566x)
  2,830          *a = adc(*a, 0, &mut carry);
 29,998  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/add.rs:num_bigint_dig::algorithms::add::adc (566x)
      .      }
  2,610  }
      .  
      .  /// Three argument multiply accumulate:
      .  /// acc += b * c
  6,376  pub fn mac3(acc: &mut [BigDigit], b: &[BigDigit], c: &[BigDigit]) {
 22,605      let (x, y) = if b.len() < c.len() { (b, c) } else { (c, b) };
 12,752  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (1,594x)
      .  
      .      // We use three algorithms for different input sizes.
      .      //
      .      // - For small inputs, long multiplication is fastest.
      .      // - Next we use Karatsuba multiplication (Toom-2), which we have optimized
      .      //   to avoid unnecessary allocations for intermediate values.
      .      // - For the largest inputs we use Toom-3, which better optimizes the
      .      //   number of operations, but uses more temporary allocations.
      .      //
      .      // The thresholds are somewhat arbitrary, chosen by evaluating the results
      .      // of `cargo bench --bench bigint multiply`.
      .  
  8,767      if x.len() <= 32 {
  6,376  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (797x)
    797          long(acc, x, y)
3,895,159  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/mac.rs:num_bigint_dig::algorithms::mac::long (797x)
      .      } else if x.len() <= 256 {
      .          karatsuba(acc, x, y)
      .      } else {
      .          toom3(acc, x, y)
      .      }
  1,594  }
      .  
      .  /// Long multiplication:
  6,376  fn long(acc: &mut [BigDigit], x: &[BigDigit], y: &[BigDigit]) {
 44,644      for (i, xi) in x.iter().enumerate() {
287,758  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Enumerate<I> as core::iter::traits::iterator::Iterator>::next (1,667x)
 69,339  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter (797x)
 14,346  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::enumerate (797x)
  6,376  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (797x)
 13,920          mac_digit(&mut acc[i..], y, *xi);
3,302,036  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/mac.rs:num_bigint_dig::algorithms::mac::mac_digit (870x)
147,030  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut (870x)
      .      }
  1,594  }
      .  
      .  /// Karatsuba multiplication:
      .  ///
      .  /// The idea is that we break x and y up into two smaller numbers that each have about half
      .  /// as many digits, like so (note that multiplying by b is just a shift):
      .  ///
      .  /// x = x0 + x1 * b
      .  /// y = y0 + y1 * b
-- line 78 ----------------------------------------

115,372  <counts for unidentified lines in /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/mac.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs
--------------------------------------------------------------------------------
Ir        

-- line 139 ----------------------------------------
        .  
        .  #[macro_export]
        .  macro_rules! smallvec {
        .      // count helper: transform any expression into 1
        .      (@one $x:expr) => (1usize);
        .      ($elem:expr; $n:expr) => ({
        .          $crate::SmallVec::from_elem($elem, $n)
        .      });
        2      ($($x:expr),*$(,)*) => ({
        2          let count = 0usize $(+ smallvec!(@one $x))*;
       14          let mut vec = $crate::SmallVec::new();
      186  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::new (2x)
       20          if count <= vec.inline_size() {
       18  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::inline_size (2x)
       10              $(vec.push($x);)*
      428  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::push (2x)
       14              vec
       26  => ???:0x00000000001360f0 (2x)
        .          } else {
        .              $crate::SmallVec::from_vec($crate::alloc::vec![$($x,)*])
        .          }
       10      });
        .  }
        .  
        .  /// `panic!()` in debug builds, optimization hint in release.
        .  #[cfg(not(feature = "union"))]
        .  macro_rules! debug_unreachable {
        .      () => {
        .          debug_unreachable!("entered unreachable code")
        .      };
-- line 164 ----------------------------------------
-- line 214 ----------------------------------------
        .  }
        .  
        .  impl From<LayoutErr> for CollectionAllocErr {
        .      fn from(_: LayoutErr) -> Self {
        .          CollectionAllocErr::CapacityOverflow
        .      }
        .  }
        .  
    3,617  fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
        .      match result {
   14,468          Ok(x) => x,
        .          Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
        .          Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
        .      }
    7,234  }
        .  
        .  /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
        .  /// https://github.com/rust-lang/rust/issues/55724
    1,182  fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
    5,910      let size = mem::size_of::<T>().checked_mul(n)
   18,124  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl usize>::checked_mul (394x)
   11,426  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::ok_or (394x)
    3,152  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/result.rs:<core::result::Result<T,E> as core::ops::try::Try>::into_result (394x)
    1,576          .ok_or(CollectionAllocErr::CapacityOverflow)?;
    1,576      let align = mem::align_of::<T>();
    1,576      Layout::from_size_align(size, align)
   37,824  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/alloc/layout.rs:core::alloc::layout::Layout::from_size_align (394x)
   11,820  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/result.rs:core::result::Result<T,E>::map_err (394x)
        .          .map_err(|_| CollectionAllocErr::CapacityOverflow)
    1,182  }
        .  
        .  unsafe fn deallocate<T>(ptr: *mut T, capacity: usize) {
        .      // This unwrap should succeed since the same did when allocating.
        .      let layout = layout_array::<T>(capacity).unwrap();
        .      alloc::alloc::dealloc(ptr as *mut u8, layout)
        .  }
        .  
        .  /// An iterator that removes the items from a `SmallVec` and yields them by value.
-- line 246 ----------------------------------------
-- line 365 ----------------------------------------
        .  enum SmallVecData<A: Array> {
        .      Inline(MaybeUninit<A>),
        .      Heap((*mut A::Item, usize)),
        .  }
        .  
        .  #[cfg(not(feature = "union"))]
        .  impl<A: Array> SmallVecData<A> {
        .      #[inline]
    4,824      unsafe fn inline(&self) -> *const A::Item {
        .          match self {
   19,296              SmallVecData::Inline(a) => a.as_ptr() as *const A::Item,
        .              _ => debug_unreachable!(),
        .          }
    4,824      }
        .      #[inline]
    7,204      unsafe fn inline_mut(&mut self) -> *mut A::Item {
        .          match self {
   28,816              SmallVecData::Inline(a) => a.as_mut_ptr() as *mut A::Item,
        .              _ => debug_unreachable!(),
        .          }
    7,204      }
        .      #[inline]
    1,236      fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
   10,506          SmallVecData::Inline(inline)
    1,236      }
        .      #[inline]
        .      unsafe fn into_inline(self) -> MaybeUninit<A> {
        .          match self {
        .              SmallVecData::Inline(a) => a,
        .              _ => debug_unreachable!(),
        .          }
        .      }
        .      #[inline]
  425,082      unsafe fn heap(&self) -> (*mut A::Item, usize) {
        .          match self {
1,912,869              SmallVecData::Heap(data) => *data,
        .              _ => debug_unreachable!(),
        .          }
  425,082      }
        .      #[inline]
  334,758      unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
        .          match self {
  836,895              SmallVecData::Heap(data) => data,
        .              _ => debug_unreachable!(),
        .          }
  334,758      }
        .      #[inline]
    4,560      fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
    7,980          SmallVecData::Heap((ptr, len))
    2,280      }
        .  }
        .  
        .  unsafe impl<A: Array + Send> Send for SmallVecData<A> {}
        .  unsafe impl<A: Array + Sync> Sync for SmallVecData<A> {}
        .  
        .  /// A `Vec`-like container that can store a small number of elements inline.
        .  ///
        .  /// `SmallVec` acts like a vector, but can store a limited amount of data inline within the
-- line 422 ----------------------------------------
-- line 449 ----------------------------------------
        .      // If capacity > A::size() then the heap variant is used and capacity holds the size of the memory allocation.
        .      capacity: usize,
        .      data: SmallVecData<A>,
        .  }
        .  
        .  impl<A: Array> SmallVec<A> {
        .      /// Construct an empty vector
        .      #[inline]
    1,236      pub fn new() -> SmallVec<A> {
        .          // Try to detect invalid custom implementations of `Array`. Hopefuly,
        .          // this check should be optimized away entirely for valid ones.
    3,090          assert!(
    8,034              mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
    1,236  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<[T; 4] as smallvec::Array>::size (618x)
    1,236                  && mem::align_of::<A>() >= mem::align_of::<A::Item>()
        .          );
    4,944          SmallVec {
    8,034  => ???:0x00000000001360f0 (618x)
        .              capacity: 0,
    2,472              data: SmallVecData::from_inline(MaybeUninit::uninit()),
   12,978  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVecData<A>::from_inline (618x)
        .          }
    1,236      }
        .  
        .      /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
        .      /// elements.
        .      ///
        .      /// Will create a heap allocation only if `n` is larger than the inline capacity.
        .      ///
        .      /// ```
        .      /// # use smallvec::SmallVec;
        .      ///
        .      /// let v: SmallVec<[u8; 3]> = SmallVec::with_capacity(100);
        .      ///
        .      /// assert!(v.is_empty());
        .      /// assert!(v.capacity() >= 100);
        .      /// ```
        .      #[inline]
    2,100      pub fn with_capacity(n: usize) -> Self {
      700          let mut v = SmallVec::new();
   32,550  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::new (350x)
    1,750          v.reserve_exact(n);
  276,789  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::reserve_exact (350x)
        .          v
      700      }
        .  
        .      /// Construct a new `SmallVec` from a `Vec<A::Item>`.
        .      ///
        .      /// Elements will be copied to the inline buffer if vec.capacity() <= A::size().
        .      ///
        .      /// ```rust
        .      /// use smallvec::SmallVec;
        .      ///
        .      /// let vec = vec![1, 2, 3, 4, 5];
        .      /// let small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);
        .      ///
        .      /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .      /// ```
        .      #[inline]
    1,508      pub fn from_vec(mut vec: Vec<A::Item>) -> SmallVec<A> {
   11,310          if vec.capacity() <= A::size() {
   12,064  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:alloc::vec::Vec<T>::capacity (754x)
    1,508  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<[T; 4] as smallvec::Array>::size (754x)
        .              unsafe {
        .                  let mut data = SmallVecData::<A>::from_inline(MaybeUninit::uninit());
        .                  let len = vec.len();
        .                  vec.set_len(0);
        .                  ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut(), len);
        .  
        .                  SmallVec {
        .                      capacity: len,
        .                      data,
        .                  }
        .              }
        .          } else {
   19,604              let (ptr, cap, len) = (vec.as_mut_ptr(), vec.capacity(), vec.len());
   25,636  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:alloc::vec::Vec<T>::as_mut_ptr (754x)
   12,064  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:alloc::vec::Vec<T>::capacity (754x)
    3,770  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:alloc::vec::Vec<T>::len (754x)
   10,556              mem::forget(vec);
   15,834  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/mem/mod.rs:core::mem::forget (754x)
        .  
    5,278              SmallVec {
    9,802  => ???:0x00000000001360f0 (754x)
        .                  capacity: cap,
    4,524                  data: SmallVecData::from_heap(ptr, len),
    9,802  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVecData<A>::from_heap (754x)
        .              }
        .          }
    3,016      }
        .  
        .      /// Constructs a new `SmallVec` on the stack from an `A` without
        .      /// copying elements.
        .      ///
        .      /// ```rust
        .      /// use smallvec::SmallVec;
        .      ///
        .      /// let buf = [1, 2, 3, 4, 5];
-- line 533 ----------------------------------------
-- line 584 ----------------------------------------
        .          }
        .      }
        .  
        .      /// Sets the length of a vector.
        .      ///
        .      /// This will explicitly set the size of the vector, without actually
        .      /// modifying its buffers, so it is up to the caller to ensure that the
        .      /// vector is actually the specified size.
       12      pub unsafe fn set_len(&mut self, new_len: usize) {
       40          let (_, len_ptr, _) = self.triple_mut();
      236  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::triple_mut (4x)
        4          *len_ptr = new_len;
        8      }
        .  
        .      /// The maximum number of elements this vector can hold inline
        .      #[inline]
      784      pub fn inline_size(&self) -> usize {
      784          A::size()
      784  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<[T; 4] as smallvec::Array>::size (392x)
      784      }
        .  
        .      /// The number of elements stored in the vector
        .      #[inline]
   30,636      pub fn len(&self) -> usize {
   91,908          self.triple().1
  967,142  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::triple (15,318x)
   30,636      }
        .  
        .      /// Returns `true` if the vector is empty
        .      #[inline]
    2,854      pub fn is_empty(&self) -> bool {
    5,708          self.len() == 0
  104,899  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (1,427x)
    7,135      }
        .  
        .      /// The number of items the vector can hold without reallocating
        .      #[inline]
        .      pub fn capacity(&self) -> usize {
        .          self.triple().2
        .      }
        .  
        .      /// Returns a tuple with (data ptr, len, capacity)
        .      /// Useful to get all SmallVec properties with a single check of the current storage variant.
        .      #[inline]
  855,284      fn triple(&self) -> (*const A::Item, usize, usize) {
        .          unsafe {
1,710,568              if self.spilled() {
3,634,957  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::spilled (213,821x)
1,902,681                  let (ptr, len) = self.data.heap();
2,959,726  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVecData<A>::heap (211,409x)
1,057,045                  (ptr, len, self.capacity)
        .              } else {
   33,768                  (self.data.inline(), self.capacity, A::size())
   33,768  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVecData<A>::inline (2,412x)
    4,824  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<[T; 4] as smallvec::Array>::size (2,412x)
        .              }
        .          }
  427,642      }
        .  
        .      /// Returns a tuple with (data ptr, len ptr, capacity)
        .      #[inline]
  683,924      fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
        .          unsafe {
1,367,848              if self.spilled() {
2,906,677  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::spilled (170,981x)
1,506,411                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
1,673,790  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVecData<A>::heap_mut (167,379x)
  836,895                  (ptr, len_ptr, self.capacity)
        .              } else {
   43,224                  (self.data.inline_mut(), &mut self.capacity, A::size())
   50,428  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVecData<A>::inline_mut (3,602x)
    7,204  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<[T; 4] as smallvec::Array>::size (3,602x)
        .              }
        .          }
  341,962      }
        .  
        .      /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
        .      #[inline]
  773,116      pub fn spilled(&self) -> bool {
2,319,348          self.capacity > A::size()
  773,116  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<[T; 4] as smallvec::Array>::size (386,558x)
1,932,790      }
        .  
        .      /// Creates a draining iterator that removes the specified range in the vector
        .      /// and yields the removed items.
        .      ///
        .      /// Note 1: The element range is removed even if the iterator is only
        .      /// partially consumed or not consumed at all.
        .      ///
        .      /// Note 2: It is unspecified how many elements are removed from the vector
-- line 660 ----------------------------------------
-- line 696 ----------------------------------------
        .                  iter: range_slice.iter(),
        .                  vec: NonNull::from(self),
        .              }
        .          }
        .      }
        .  
        .      /// Append an item to the vector.
        .      #[inline]
   11,619      pub fn push(&mut self, value: A::Item) {
        .          unsafe {
   61,968              let (_, &mut len, cap) = self.triple_mut();
  229,606  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::triple_mut (3,873x)
   15,492              if len == cap {
        .                  self.reserve(1);
        .              }
   38,730              let (ptr, len_ptr, _) = self.triple_mut();
  229,606  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::triple_mut (3,873x)
   30,984              *len_ptr = len + 1;
   46,476              ptr::write(ptr.add(len), value);
   73,587  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::add (3,873x)
   23,238  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::write (3,873x)
        .          }
    7,746      }
        .  
        .      /// Remove an item from the end of the vector and return it, or None if empty.
        .      #[inline]
    4,026      pub fn pop(&mut self) -> Option<A::Item> {
        .          unsafe {
   18,117              let (ptr, len_ptr, _) = self.triple_mut();
  121,322  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::triple_mut (2,013x)
    8,052              if *len_ptr == 0 {
        .                  return None;
        .              }
   18,117              let last_index = *len_ptr - 1;
    4,026              *len_ptr = last_index;
   14,091              Some(ptr::read(ptr.add(last_index)))
   88,572  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::read (2,013x)
   38,247  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::add (2,013x)
        .          }
   10,065      }
        .  
        .      /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
        .      ///
        .      /// Panics if `new_cap` is less than the vector's length
        .      /// or if the capacity computation overflows `usize`.
        .      pub fn grow(&mut self, new_cap: usize) {
        .          infallible(self.try_grow(new_cap))
        .      }
        .  
        .      /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
        .      ///
        .      /// Panics if `new_cap` is less than the vector's length
    1,544      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
        .          unsafe {
    6,948              let (ptr, &mut len, cap) = self.triple_mut();
   25,420  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::triple_mut (386x)
    3,088              let unspilled = !self.spilled();
    6,562  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::spilled (386x)
    2,316              assert!(new_cap >= len);
    2,316              if new_cap <= self.inline_size() {
    3,474  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::inline_size (386x)
        .                  if unspilled {
        .                      return Ok(());
        .                  }
        .                  self.data = SmallVecData::from_inline(MaybeUninit::uninit());
        .                  ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
        .                  self.capacity = len;
        .                  deallocate(ptr, cap);
      772              } else if new_cap != cap {
    6,176                  let layout = layout_array::<A::Item>(new_cap)?;
   99,588  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::layout_array (386x)
    3,088  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/result.rs:<core::result::Result<T,E> as core::ops::try::Try>::into_result (386x)
        .                  let new_alloc;
    1,158                  if unspilled {
    8,694                      new_alloc = NonNull::new(alloc::alloc::alloc(layout))
   45,733  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/alloc.rs:alloc::alloc::alloc (378x)
   12,852  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::new (378x)
   11,718  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::ok_or (378x)
    8,316  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::cast (378x)
    3,024  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/result.rs:<core::result::Result<T,E> as core::ops::try::Try>::into_result (378x)
    1,890  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::as_ptr (378x)
    2,646                          .ok_or(CollectionAllocErr::AllocErr { layout })?
        .                          .cast()
        .                          .as_ptr();
    1,512                      ptr::copy_nonoverlapping(ptr, new_alloc, len);
    9,820  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/intrinsics.rs:core::intrinsics::copy_nonoverlapping (378x)
        .                  } else {
        .                      // This should never fail since the same succeeded
        .                      // when previously allocating `ptr`.
      136                      let old_layout = layout_array::<A::Item>(cap)?;
    2,064  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::layout_array (8x)
       64  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/result.rs:<core::result::Result<T,E> as core::ops::try::Try>::into_result (8x)
        .  
       80                      let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
    3,531  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/alloc.rs:alloc::alloc::realloc (8x)
       40  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/alloc/layout.rs:core::alloc::layout::Layout::size (8x)
      152                      new_alloc = NonNull::new(new_ptr)
      272  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::new (8x)
      248  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::ok_or (8x)
      176  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::cast (8x)
       64  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/result.rs:<core::result::Result<T,E> as core::ops::try::Try>::into_result (8x)
       40  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::as_ptr (8x)
       56                          .ok_or(CollectionAllocErr::AllocErr { layout })?
        .                          .cast()
        .                          .as_ptr();
        .                  }
    4,632                  self.data = SmallVecData::from_heap(new_alloc, len);
    5,018  => ???:0x00000000001360f0 (386x)
    5,018  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVecData<A>::from_heap (386x)
      386                  self.capacity = new_cap;
        .              }
      386              Ok(())
        .          }
    1,158      }
        .  
        .      /// Reserve capacity for `additional` more elements to be inserted.
        .      ///
        .      /// May reserve more space to avoid frequent reallocations.
        .      ///
        .      /// Panics if the capacity computation overflows `usize`.
        .      #[inline]
    9,801      pub fn reserve(&mut self, additional: usize) {
   32,670          infallible(self.try_reserve(additional))
  421,624  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::try_reserve (3,267x)
   22,869  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::infallible (3,267x)
    6,534      }
        .  
        .      /// Reserve capacity for `additional` more elements to be inserted.
        .      ///
        .      /// May reserve more space to avoid frequent reallocations.
   13,068      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
        .          // prefer triple_mut() even if triple() would work
        .          // so that the optimizer removes duplicated calls to it
        .          // from callers like insert()
   39,204          let (_, &mut len, cap) = self.triple_mut();
  196,610  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::triple_mut (3,267x)
   26,136          if cap - len >= additional {
    9,483              return Ok(());
        .          }
    2,226          let new_cap = len
   13,356  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::and_then (106x)
    4,770  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl usize>::checked_add (106x)
    3,074  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::ok_or (106x)
      848  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/result.rs:<core::result::Result<T,E> as core::ops::try::Try>::into_result (106x)
        .              .checked_add(additional)
        .              .and_then(usize::checked_next_power_of_two)
      424              .ok_or(CollectionAllocErr::CapacityOverflow)?;
      318          self.try_grow(new_cap)
   92,081  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::try_grow (106x)
    6,640      }
        .  
        .      /// Reserve the minimum capacity for `additional` more elements to be inserted.
        .      ///
        .      /// Panics if the new capacity overflows `usize`.
    1,050      pub fn reserve_exact(&mut self, additional: usize) {
    3,500          infallible(self.try_reserve_exact(additional))
  269,089  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::try_reserve_exact (350x)
    2,450  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::infallible (350x)
      700      }
        .  
        .      /// Reserve the minimum capacity for `additional` more elements to be inserted.
    1,400      pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
    4,200          let (_, &mut len, cap) = self.triple_mut();
   23,100  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::triple_mut (350x)
    2,800          if cap - len >= additional {
      210              return Ok(());
        .          }
    5,040          let new_cap = len
   12,600  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl usize>::checked_add (280x)
    8,120  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::ok_or (280x)
    2,240  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/result.rs:<core::result::Result<T,E> as core::ops::try::Try>::into_result (280x)
        .              .checked_add(additional)
    1,120              .ok_or(CollectionAllocErr::CapacityOverflow)?;
      840          self.try_grow(new_cap)
  204,759  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::try_grow (280x)
      980      }
        .  
        .      /// Shrink the capacity of the vector as much as possible.
        .      ///
        .      /// When possible, this will move data from an external heap buffer to the vector's inline
        .      /// storage.
        .      pub fn shrink_to_fit(&mut self) {
        .          if !self.spilled() {
        .              return;
-- line 834 ----------------------------------------
-- line 849 ----------------------------------------
        .  
        .      /// Shorten the vector, keeping the first `len` elements and dropping the rest.
        .      ///
        .      /// If `len` is greater than or equal to the vector's current length, this has no
        .      /// effect.
        .      ///
        .      /// This does not re-allocate.  If you want the vector's capacity to shrink, call
        .      /// `shrink_to_fit` after truncating.
   19,023      pub fn truncate(&mut self, len: usize) {
        .          unsafe {
   82,433              let (ptr, len_ptr, _) = self.triple_mut();
  376,842  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::triple_mut (6,341x)
  305,095              while len < *len_ptr {
  779,768                  let last_index = *len_ptr - 1;
  194,942                  *len_ptr = last_index;
  292,413                  ptr::drop_in_place(ptr.add(last_index));
1,851,949  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::add (97,471x)
        .              }
        .          }
   12,682      }
        .  
        .      /// Extracts a slice containing the entire vector.
        .      ///
        .      /// Equivalent to `&s[..]`.
        .      pub fn as_slice(&self) -> &[A::Item] {
        .          self
        .      }
        .  
-- line 874 ----------------------------------------
-- line 889 ----------------------------------------
        .          let len = self.len();
        .          self.swap(len - 1, index);
        .          self.pop()
        .              .unwrap_or_else(|| unsafe { unreachable_unchecked() })
        .      }
        .  
        .      /// Remove all elements from the vector.
        .      #[inline]
   11,088      pub fn clear(&mut self) {
    2,772          self.truncate(0);
2,010,868  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::truncate (2,772x)
    5,544      }
        .  
        .      /// Remove and return the element at position `index`, shifting all elements after it to the
        .      /// left.
        .      ///
        .      /// Panics if `index` is out of bounds.
        .      pub fn remove(&mut self, index: usize) -> A::Item {
        .          unsafe {
        .              let (mut ptr, len_ptr, _) = self.triple_mut();
-- line 907 ----------------------------------------
-- line 1200 ----------------------------------------
        .              }
        .          }
        .      }
        .  
        .      /// Copy elements from a slice into the vector at position `index`, shifting any following
        .      /// elements toward the back.
        .      ///
        .      /// For slices of `Copy` types, this is more efficient than `insert`.
       24      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
       32          self.reserve(slice.len());
    4,316  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::reserve (4x)
       32  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (4x)
        .  
       12          let len = self.len();
      292  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (4x)
       20          assert!(index <= len);
        .  
        .          unsafe {
       16              let slice_ptr = slice.as_ptr();
       24  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::as_ptr (4x)
       32              let ptr = self.as_mut_ptr().add(index);
      412  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::DerefMut>::deref_mut (4x)
       76  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::add (4x)
       24  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::as_mut_ptr (4x)
       40              ptr::copy(ptr, ptr.add(slice.len()), len - index);
       76  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::add (4x)
       32  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (4x)
      104  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/intrinsics.rs:core::intrinsics::copy (4x)
       12              ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
      136  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/intrinsics.rs:core::intrinsics::copy_nonoverlapping (4x)
       32  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (4x)
       32              self.set_len(len + slice.len());
      300  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::set_len (4x)
       32  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (4x)
        .          }
        8      }
        .  
        .      /// Copy elements from a slice and append them to the vector.
        .      ///
        .      /// For slices of `Copy` types, this is more efficient than `extend`.
        .      #[inline]
       28      pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
       12          let len = self.len();
      308  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (4x)
        4          self.insert_from_slice(len, slice);
    6,244  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::insert_from_slice (4x)
        8      }
        .  }
        .  
        .  impl<A: Array> SmallVec<A>
        .  where
        .      A::Item: Clone,
        .  {
        .      /// Resizes the vector so that its length is equal to `len`.
        .      ///
        .      /// If `len` is less than the current length, the vector simply truncated.
        .      ///
        .      /// If `len` is greater than the current length, `value` is appended to the
        .      /// vector until its length equals `len`.
   13,328      pub fn resize(&mut self, len: usize, value: A::Item) {
   39,984          let old_len = self.len();
  243,844  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (3,332x)
        .  
    9,996          if len > old_len {
   80,968              self.extend(repeat(value).take(len - old_len));
13,696,465  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::iter::traits::collect::Extend<<A as smallvec::Array>::Item>>::extend (2,792x)
   53,048  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::take (2,792x)
   16,752  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/sources.rs:core::iter::sources::repeat (2,792x)
        .          } else {
    2,700              self.truncate(len);
  204,896  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::truncate (540x)
        .          }
   14,408      }
        .  
        .      /// Creates a `SmallVec` with `n` copies of `elem`.
        .      /// ```
        .      /// use smallvec::SmallVec;
        .      ///
        .      /// let v = SmallVec::<[char; 128]>::from_elem('d', 2);
        .      /// assert_eq!(v, SmallVec::from_buf(['d', 'd']));
        .      /// ```
    3,240      pub fn from_elem(elem: A::Item, n: usize) -> Self {
    9,664          if n > A::size() {
    1,620  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<[T; 4] as smallvec::Array>::size (810x)
    5,278              vec![elem; n].into()
  172,666  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/convert/mod.rs:<T as core::convert::Into<U>>::into (754x)
        .          } else {
      224              let mut v = SmallVec::<A>::new();
    5,208  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::new (56x)
        .              unsafe {
      504                  let (ptr, len_ptr, _) = v.triple_mut();
    3,696  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::triple_mut (56x)
      504                  let mut local_len = SetLenOnDrop::new(len_ptr);
      504  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SetLenOnDrop::new (56x)
        .  
    5,180                  for i in 0..n {
   39,312  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/range.rs:core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next (252x)
      392  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (56x)
    2,744                      ::core::ptr::write(ptr.add(i), elem.clone());
    3,724  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::add (196x)
    1,176  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::write (196x)
      980  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/clone.rs:core::clone::impls::<impl core::clone::Clone for u64>::clone (196x)
      392                      local_len.increment_len(1);
    2,744  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SetLenOnDrop::increment_len (196x)
        .                  }
      224              }
      672  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (56x)
      280              v
      728  => ???:0x00000000001360f0 (56x)
        .          }
    3,352      }
        .  }
        .  
        .  impl<A: Array> ops::Deref for SmallVec<A> {
        .      type Target = [A::Item];
        .      #[inline]
  397,006      fn deref(&self) -> &[A::Item] {
        .          unsafe {
1,786,527              let (ptr, len, _) = self.triple();
12,513,229  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::triple (198,503x)
  992,515              slice::from_raw_parts(ptr, len)
4,565,569  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::from_raw_parts (198,503x)
        .          }
  397,006      }
        .  }
        .  
        .  impl<A: Array> ops::DerefMut for SmallVec<A> {
        .      #[inline]
  295,110      fn deref_mut(&mut self) -> &mut [A::Item] {
        .          unsafe {
1,475,550              let (ptr, &mut len, _) = self.triple_mut();
8,710,967  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::triple_mut (147,555x)
  737,775              slice::from_raw_parts_mut(ptr, len)
3,393,765  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::from_raw_parts_mut (147,555x)
        .          }
  295,110      }
        .  }
        .  
        .  impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
        .      #[inline]
        .      fn as_ref(&self) -> &[A::Item] {
        .          self
        .      }
        .  }
-- line 1305 ----------------------------------------
-- line 1422 ----------------------------------------
        .  }
        .  
        .  impl<'a, A: Array> From<&'a [A::Item]> for SmallVec<A>
        .  where
        .      A::Item: Clone,
        .  {
        .      #[cfg(not(feature = "specialization"))]
        .      #[inline]
       55      fn from(slice: &'a [A::Item]) -> SmallVec<A> {
      110          slice.iter().cloned().collect()
   75,160  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::collect (11x)
      957  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter (11x)
      209  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::cloned (11x)
       22      }
        .  
        .      #[cfg(feature = "specialization")]
        .      #[inline]
        .      fn from(slice: &'a [A::Item]) -> SmallVec<A> {
        .          SmallVec::spec_from(slice)
        .      }
        .  }
        .  
        .  impl<A: Array> From<Vec<A::Item>> for SmallVec<A> {
        .      #[inline]
    1,508      fn from(vec: Vec<A::Item>) -> SmallVec<A> {
    6,032          SmallVec::from_vec(vec)
  151,554  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::from_vec (754x)
    1,508      }
        .  }
        .  
        .  impl<A: Array> From<A> for SmallVec<A> {
        .      #[inline]
        .      fn from(array: A) -> SmallVec<A> {
        .          SmallVec::from_buf(array)
        .      }
        .  }
        .  
        .  impl<A: Array, I: SliceIndex<[A::Item]>> ops::Index<I> for SmallVec<A> {
        .      type Output = I::Output;
        .  
  292,368      fn index(&self, index: I) -> &I::Output {
1,770,811          &(**self)[index]
10,446,624  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::Deref>::deref (98,522x)
3,381,179  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::Index<I> for [T]>::index (98,522x)
  197,044      }
        .  }
        .  
        .  impl<A: Array, I: SliceIndex<[A::Item]>> ops::IndexMut<I> for SmallVec<A> {
  526,606      fn index_mut(&mut self, index: I) -> &mut I::Output {
2,883,407          &mut (&mut **self)[index]
14,883,164  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::DerefMut>::deref_mut (144,465x)
14,423,680  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut (144,465x)
  288,930      }
        .  }
        .  
        .  impl<A: Array> ExtendFromSlice<A::Item> for SmallVec<A>
        .  where
        .      A::Item: Copy,
        .  {
        .      fn extend_from_slice(&mut self, other: &[A::Item]) {
        .          SmallVec::extend_from_slice(self, other)
        .      }
        .  }
        .  
        .  impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
        .      #[inline]
      434      fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
    1,236          let mut v = SmallVec::new();
   19,158  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::new (206x)
    2,222          v.extend(iterable);
  849,565  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::iter::traits::collect::Extend<<A as smallvec::Array>::Item>>::extend (206x)
        .          v
      412      }
        .  }
        .  
        .  impl<A: Array> Extend<A::Item> for SmallVec<A> {
   12,662      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
   39,769          let mut iter = iterable.into_iter();
   23,064  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (3,263x)
   22,841          let (lower_size_bound, _) = iter.size_hint();
  385,848  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Take<I> as core::iter::traits::iterator::Iterator>::size_hint (2,796x)
   19,856  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Cloned<I> as core::iter::traits::iterator::Iterator>::size_hint (272x)
   16,934  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Map<I,F> as core::iter::traits::iterator::Iterator>::size_hint (195x)
   16,315          self.reserve(lower_size_bound);
  489,182  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::reserve (3,263x)
        .  
        .          unsafe {
   35,893              let (ptr, len_ptr, cap) = self.triple_mut();
  195,688  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::triple_mut (3,263x)
   32,630              let mut len = SetLenOnDrop::new(len_ptr);
   29,367  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SetLenOnDrop::new (3,263x)
  593,125              while len.get() < cap {
  496,990  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SetLenOnDrop::get (99,398x)
1,543,231                  if let Some(out) = iter.next() {
3,326,856  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Take<I> as core::iter::traits::iterator::Iterator>::next (95,064x)
  651,822  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Map<I,F> as core::iter::traits::iterator::Iterator>::next (558x)
  157,884  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Cloned<I> as core::iter::traits::iterator::Iterator>::next (974x)
1,442,025                      ptr::write(ptr.add(len.get()), out);
1,826,565  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::add (96,135x)
  480,675  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SetLenOnDrop::get (96,135x)
  576,810  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::write (96,135x)
  192,270                      len.increment_len(1);
1,345,890  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SetLenOnDrop::increment_len (96,135x)
   96,135                  } else {
        .                      return;
        .                  }
      461              }
   13,052          }
   39,156  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (3,263x)
        .  
   67,325          for elem in iter {
   30,580  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Take<I> as core::iter::traits::iterator::Iterator>::next (2,780x)
      891  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Map<I,F> as core::iter::traits::iterator::Iterator>::next (11x)
    1,155  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Cloned<I> as core::iter::traits::iterator::Iterator>::next (11x)
   19,647  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (2,802x)
        .              self.push(elem);
    5,604          }
   13,513      }
        .  }
        .  
        .  impl<A: Array> fmt::Debug for SmallVec<A>
        .  where
        .      A::Item: fmt::Debug,
        .  {
        .      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .          f.debug_list().entries(self.iter()).finish()
-- line 1517 ----------------------------------------
-- line 1536 ----------------------------------------
        .                  ptr::drop_in_place(&mut self[..]);
        .              }
        .          }
        .      }
        .  }
        .  
        .  #[cfg(not(feature = "may_dangle"))]
        .  impl<A: Array> Drop for SmallVec<A> {
    4,110      fn drop(&mut self) {
        .          unsafe {
    7,088              if self.spilled() {
   23,290  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::spilled (1,370x)
   10,188                  let (ptr, len) = self.data.heap();
   15,848  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVecData<A>::heap (1,132x)
    7,924                  Vec::from_raw_parts(ptr, len, self.capacity);
  490,450  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place'2 (1,132x)
   62,260  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:alloc::vec::Vec<T>::from_raw_parts (1,132x)
        .              } else {
      952                  ptr::drop_in_place(&mut self[..]);
   35,938  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::IndexMut<I>>::index_mut (238x)
        .              }
        .          }
    2,740      }
        .  }
        .  
        .  impl<A: Array> Clone for SmallVec<A>
        .  where
        .      A::Item: Clone,
        .  {
        .      #[inline]
    1,332      fn clone(&self) -> SmallVec<A> {
    2,331          let mut new_vector = SmallVec::with_capacity(self.len());
  307,555  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::with_capacity (333x)
   24,441  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (333x)
   85,128          for element in self.iter() {
  477,618  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:<core::slice::Iter<T> as core::iter::traits::iterator::Iterator>::next (4,200x)
   35,430  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::Deref>::deref (333x)
   28,971  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter (333x)
    2,331  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (333x)
   34,803              new_vector.push((*element).clone())
  775,514  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::push (3,867x)
   19,335  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/clone.rs:core::clone::impls::<impl core::clone::Clone for u64>::clone (3,867x)
        .          }
        .          new_vector
      666      }
        .  }
        .  
        .  impl<A: Array, B: Array> PartialEq<SmallVec<B>> for SmallVec<A>
        .  where
        .      A::Item: PartialEq<B::Item>,
        .  {
        .      #[inline]
        .      fn eq(&self, other: &SmallVec<B>) -> bool {
-- line 1575 ----------------------------------------
-- line 1745 ----------------------------------------
        .  /// Copied from https://github.com/rust-lang/rust/pull/36355
        .  struct SetLenOnDrop<'a> {
        .      len: &'a mut usize,
        .      local_len: usize,
        .  }
        .  
        .  impl<'a> SetLenOnDrop<'a> {
        .      #[inline]
    6,638      fn new(len: &'a mut usize) -> Self {
    6,638          SetLenOnDrop {
    3,319              local_len: *len,
        .              len,
        .          }
   13,276      }
        .  
        .      #[inline]
  391,066      fn get(&self) -> usize {
  195,533          self.local_len
  391,066      }
        .  
        .      #[inline]
  288,993      fn increment_len(&mut self, increment: usize) {
  674,317          self.local_len += increment;
  192,662      }
        .  }
        .  
        .  impl<'a> Drop for SetLenOnDrop<'a> {
        .      #[inline]
    6,638      fn drop(&mut self) {
    9,957          *self.len = self.local_len;
    6,638      }
        .  }
        .  
        .  #[cfg(feature = "const_generics")]
        .  unsafe impl<T, const N: usize> Array for [T; N] {
        .      type Item = T;
        .      fn size() -> usize { N }
        .  }
        .  
        .  #[cfg(not(feature = "const_generics"))]
        .  macro_rules! impl_array(
        .      ($($size:expr),+) => {
        .          $(
        .              unsafe impl<T> Array for [T; $size] {
        .                  type Item = T;
  790,292                  fn size() -> usize { $size }
        .              }
        .          )+
        .      }
        .  );
        .  
        .  #[cfg(not(feature = "const_generics"))]
        .  impl_array!(
        .      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 24, 32, 36, 0x40, 0x60, 0x80,
-- line 1798 ----------------------------------------

4,626,014  <counts for unidentified lines in /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/div.rs
--------------------------------------------------------------------------------
Ir     

     .  use num_traits::{One, Zero};
     .  use smallvec::SmallVec;
     .  use core::cmp::Ordering;
     .  
     .  use crate::algorithms::{add2, cmp_slice, sub2};
     .  use crate::big_digit::{self, BigDigit, DoubleBigDigit};
     .  use crate::BigUint;
     .  
   777  pub fn div_rem_digit(mut a: BigUint, b: BigDigit) -> (BigUint, BigDigit) {
   777      let mut rem = 0;
     .  
21,250      for d in a.data.iter_mut().rev() {
68,889  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Rev<I> as core::iter::traits::iterator::Iterator>::next (764x)
28,490  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::DerefMut>::deref_mut (259x)
22,533  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter_mut (259x)
 4,921  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::rev (259x)
 1,813  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (259x)
 6,060          let (q, r) = div_wide(rem, *d, b);
801,843  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/div.rs:num_bigint_dig::algorithms::div::div_wide (505x)
   505          *d = q;
   505          rem = r;
     .      }
     .  
 6,216      (a.normalized(), rem)
129,914  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::normalized (259x)
 3,367  => ???:0x00000000001360f0 (259x)
   518  }
     .  
     .  /// Divide a two digit numerator by a one digit divisor, returns quotient and remainder:
     .  ///
     .  /// Note: the caller must ensure that both the quotient and remainder will fit into a single digit.
     .  /// This is _not_ true for an arbitrary numerator/denominator.
     .  ///
     .  /// (This function also matches what the x86 divide instruction does).
     .  #[inline]
 2,020  pub fn div_wide(hi: BigDigit, lo: BigDigit, divisor: BigDigit) -> (BigDigit, BigDigit) {
 4,040      debug_assert!(hi < divisor);
     .  
 4,040      let lhs = big_digit::to_doublebigdigit(hi, lo);
19,190  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/lib.rs:num_bigint_dig::big_digit::to_doublebigdigit (505x)
 1,010      let rhs = divisor as DoubleBigDigit;
 9,090      ((lhs / rhs) as BigDigit, (lhs % rhs) as BigDigit)
378,967  => /cargo/registry/src/github.com-1ecc6299db9ec823/compiler_builtins-0.1.31/src/macros.rs:__umodti3 (505x)
373,386  => /cargo/registry/src/github.com-1ecc6299db9ec823/compiler_builtins-0.1.31/src/int/udiv.rs:__udivti3 (505x)
 2,020  }
     .  
    60  pub fn div_rem(u: &BigUint, d: &BigUint) -> (BigUint, BigUint) {
   285      if d.is_zero() {
 1,418  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::Zero>::is_zero (15x)
     .          panic!()
     .      }
    90      if u.is_zero() {
 1,418  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::Zero>::is_zero (15x)
     .          return (Zero::zero(), Zero::zero());
     .      }
    90      if d.data.len() == 1 {
 1,103  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (15x)
    12          if d.data[0] == 1 {
   336  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (2x)
     2              return (u.clone(), Zero::zero());
     .          }
     .  
    60          let (div, rem) = div_rem_digit(u.clone(), d.data[0]);
 3,390  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/div.rs:num_bigint_dig::algorithms::div::div_rem_digit (2x)
   336  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (2x)
 2,782  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as core::clone::Clone>::clone (2x)
    54          return (div, rem.into());
 1,228  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/convert/mod.rs:<T as core::convert::Into<U>>::into (2x)
    52  => ???:0x00000000001360f0 (4x)
     2      }
     .  
     .      // Required or the q_len calculation below can underflow:
    39      match u.cmp(d) {
 7,956  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as core::cmp::Ord>::cmp (13x)
   117          Ordering::Less => return (Zero::zero(), u.clone()),
     .          Ordering::Equal => return (One::one(), Zero::zero()),
     .          Ordering::Greater => {} // Do nothing
     .      }
     .  
     .      // This algorithm is from Knuth, TAOCP vol 2 section 4.3, algorithm D:
     .      //
     .      // First, normalize the arguments so the highest bit in the highest digit of the divisor is
     .      // set: the main loop uses the highest digit of the divisor for generating guesses, so we
     .      // want it to be the largest number we can efficiently divide by.
     .      //
   208      let shift = d.data.last().unwrap().leading_zeros() as usize;
 1,378  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::Deref>::deref (13x)
   221  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::last (13x)
   195  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::unwrap (13x)
   182  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::leading_zeros (13x)
    65      let mut a = u << shift;
194,067  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<&num_bigint_dig::biguint::BigUint as core::ops::bit::Shl<usize>>::shl (13x)
    26      let b = d << shift;
108,344  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<&num_bigint_dig::biguint::BigUint as core::ops::bit::Shl<usize>>::shl (13x)
     .  
     .      // The algorithm works by incrementally calculating "guesses", q0, for part of the
     .      // remainder. Once we have any number q0 such that q0 * b <= a, we can set
     .      //
     .      //     q += q0
     .      //     a -= q0 * b
     .      //
     .      // and then iterate until a < b. Then, (q, a) will be our desired quotient and remainder.
     .      //
     .      // q0, our guess, is calculated by dividing the last few digits of a by the last digit of b
     .      // - this should give us a guess that is "close" to the actual quotient, but is possibly
     .      // greater than the actual quotient. If q0 * b > a, we simply use iterated subtraction
     .      // until we have a guess such that q0 * b <= a.
     .      //
     .  
   260      let bn = *b.data.last().unwrap();
 1,378  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::Deref>::deref (13x)
   221  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::last (13x)
   195  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::unwrap (13x)
   286      let q_len = a.data.len() - b.data.len() + 1;
 1,898  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (26x)
    91      let mut q = BigUint {
    91          data: smallvec![0; q_len],
22,483  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::from_elem (13x)
     .      };
     .  
     .      // We reuse the same temporary to avoid hitting the allocator in our inner loop - this is
     .      // sized to hold a0 (in the common case; if a particular digit of the quotient is zero a0
     .      // can be bigger).
     .      //
    91      let mut tmp = BigUint {
    65          data: SmallVec::with_capacity(2),
 2,990  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::with_capacity (13x)
     .      };
     .  
 5,299      for j in (0..q_len).rev() {
52,935  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Rev<I> as core::iter::traits::iterator::Iterator>::next (270x)
   247  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::rev (13x)
    91  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (13x)
     .          /*
     .           * When calculating our next guess q0, we don't need to consider the digits below j
     .           * + b.data.len() - 1: we're guessing digit j of the quotient (i.e. q0 << j) from
     .           * digit bn of the divisor (i.e. bn << (b.data.len() - 1) - so the product of those
     .           * two numbers will be zero in all digits up to (j + b.data.len() - 1).
     .           */
 4,369          let offset = j + b.data.len() - 1;
18,761  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (257x)
 1,799          if offset >= a.data.len() {
18,761  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (257x)
     .              continue;
     .          }
     .  
     .          /* just avoiding a heap allocation: */
 2,056          let mut a0 = tmp;
 1,542          a0.data.truncate(0);
31,625  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::truncate (257x)
 7,967          a0.data.extend(a.data[offset..].iter().cloned());
77,357  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (257x)
262,124  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::iter::traits::collect::Extend<<A as smallvec::Array>::Item>>::extend (257x)
22,359  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter (257x)
 4,883  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::cloned (257x)
     .  
     .          /*
     .           * q0 << j * big_digit::BITS is our actual quotient estimate - we do the shifts
     .           * implicitly at the end, when adding and subtracting to a and q. Not only do we
     .           * save the cost of the shifts, the rest of the arithmetic gets to work with
     .           * smaller numbers.
     .           */
 5,911          let (mut q0, _) = div_rem_digit(a0, bn);
1,096,775  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/div.rs:num_bigint_dig::algorithms::div::div_rem_digit (257x)
   771          let mut prod = &b * &q0;
2,355,648  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<&num_bigint_dig::biguint::BigUint as core::ops::arith::Mul<&num_bigint_dig::biguint::BigUint>>::mul (257x)
     .  
12,464          while cmp_slice(&prod.data[..], &a.data[j..]) == Ordering::Greater {
385,729  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/cmp.rs:num_bigint_dig::algorithms::cmp::cmp_slice (328x)
146,944  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (656x)
 9,512  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/cmp.rs:<core::cmp::Ordering as core::cmp::PartialEq>::eq (328x)
   142              let one: BigUint = One::one();
184,458  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::One>::one (71x)
 1,775              q0 = q0 - one;
167,489  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/macros.rs:<num_bigint_dig::biguint::BigUint as core::ops::arith::Sub>::sub (71x)
 1,420              prod = prod - &b;
454,418  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as core::ops::arith::Sub<&num_bigint_dig::biguint::BigUint>>::sub (71x)
   923  => ???:0x00000000001360f0 (71x)
     .          }
     .  
 6,425          add2(&mut q.data[j..], &q0.data[..]);
38,807  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (257x)
247,627  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/add.rs:num_bigint_dig::algorithms::add::add2 (257x)
76,586  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::IndexMut<I>>::index_mut (257x)
 6,425          sub2(&mut a.data[j..], &prod.data[..]);
1,532,213  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/sub.rs:num_bigint_dig::algorithms::sub::sub2 (257x)
37,779  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (257x)
76,586  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::IndexMut<I>>::index_mut (257x)
   514          a.normalize();
123,323  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::normalize (257x)
     .  
 3,598          tmp = q0;
 2,056      }
151,418  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (257x)
     .  
   117      debug_assert!(a < b);
15,930  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/cmp.rs:core::cmp::PartialOrd::lt (13x)
     .  
   468      (q.normalized(), a >> shift)
94,578  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as core::ops::bit::Shr<usize>>::shr (13x)
 6,331  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::normalized (13x)
   199  }
 9,295  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (26x)

16,067  <counts for unidentified lines in /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/div.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs
--------------------------------------------------------------------------------
Ir         

-- line 8 ----------------------------------------
         .  use biguint::BigUint;
         .  
         .  struct MontyReducer {
         .      n0inv: BigDigit,
         .  }
         .  
         .  // k0 = -m**-1 mod 2**BITS. Algorithm from: Dumas, J.G. "On Newton–Raphson
         .  // Iteration for Multiplicative Inverses Modulo Prime Powers".
        12  fn inv_mod_alt(b: BigDigit) -> BigDigit {
        68      assert_ne!(b & 1, 0);
         .  
        60      let mut k0 = 2 - b as SignedDoubleBigDigit;
        28      let mut t = (b - 1) as SignedDoubleBigDigit;
         4      let mut i = 1;
        80      while i < big_digit::BITS {
       408          t = t.wrapping_mul(t);
       552  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl i128>::wrapping_mul (24x)
       672          k0 = k0.wrapping_mul(t + 1);
       552  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl i128>::wrapping_mul (24x)
         .  
        96          i <<= 1;
         .      }
        52      -k0 as BigDigit
        12  }
         .  
         .  impl MontyReducer {
        20      fn new(n: &BigUint) -> Self {
        28          let n0inv = inv_mod_alt(n.data[0]);
     2,780  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::inv_mod_alt (4x)
       656  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (4x)
         4          MontyReducer { n0inv }
        12      }
         .  }
         .  
         .  /// Computes z mod m = x * y * 2 ** (-n*_W) mod m
         .  /// assuming k = -1/m mod 2**_W
         .  /// See Gueron, "Efficient Software Implementations of Modular Exponentiation".
         .  /// https://eprint.iacr.org/2011/239.pdf
         .  /// In the terminology of that paper, this is an "Almost Montgomery Multiplication":
         .  /// x and y are required to satisfy 0 <= z < 2**(n*_W) and then the result
         .  /// z is guaranteed to satisfy 0 <= z < 2**(n*_W), but it may not be < m.
    22,176  fn montgomery(z: &mut BigUint, x: &BigUint, y: &BigUint, m: &BigUint, k: BigDigit, n: usize) {
         .      // This code assumes x, y, m are all the same length, n.
         .      // (required by addMulVVW and the for loop).
         .      // It also assumes that x, y are already reduced mod m,
         .      // or else the result will not be properly reduced.
    13,860      assert!(
    80,388          x.data.len() == n && y.data.len() == n && m.data.len() == n,
   607,068  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (8,316x)
         .          "{:?} {:?} {:?} {}",
         .          x,
         .          y,
         .          m,
         .          n
         .      );
         .  
     8,316      z.data.clear();
 2,030,272  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::clear (2,772x)
    27,720      z.data.resize(n * 2, 0);
14,072,351  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::resize (2,772x)
         .  
     2,772      let mut c: BigDigit = 0;
         .  
   809,916      for i in 0..n {
 9,170,136  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/range.rs:core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next (50,100x)
    19,404  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (2,772x)
 1,751,136          let c2 = add_mul_vvw(&mut z.data[i..n + i], &x.data, y.data[i]);
260,108,556  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::add_mul_vvw (47,328x)
12,589,248  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::IndexMut<I>>::index_mut (47,328x)
 7,761,792  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (47,328x)
 5,016,768  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::Deref>::deref (47,328x)
   473,280          let t = z.data[i].wrapping_mul(k);
 7,761,792  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (47,328x)
   473,280  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::wrapping_mul (47,328x)
 1,135,872          let c3 = add_mul_vvw(&mut z.data[i..n + i], &m.data, t);
260,038,470  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::add_mul_vvw (47,328x)
12,589,248  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::IndexMut<I>>::index_mut (47,328x)
 5,016,768  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::Deref>::deref (47,328x)
   236,640          let cx = c.wrapping_add(c2);
   473,280  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::wrapping_add (47,328x)
   141,984          let cy = cx.wrapping_add(c3);
   473,280  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::wrapping_add (47,328x)
   567,936          z.data[n + i] = cy;
 7,619,808  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::IndexMut<I>>::index_mut (47,328x)
   596,214          c = if cx < c2 || cy < c3 { 1 } else { 0 };
         .      }
         .  
     9,043      if c == 0 {
    36,810          let (first, second) = z.data.split_at_mut(n);
   278,120  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::split_at_mut (2,045x)
   210,635  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::DerefMut>::deref_mut (2,045x)
    18,405          first.swap_with_slice(&mut second[..]);
 1,548,475  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::swap_with_slice (2,045x)
    36,810  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut (2,045x)
         .      } else {
    13,086          let (mut first, second) = z.data.split_at_mut(n);
    98,872  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::split_at_mut (727x)
    74,881  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::DerefMut>::deref_mut (727x)
    10,178          sub_vv(&mut first, &second, &m.data);
    77,062  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::deref::Deref>::deref (727x)
 5,378,931  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::sub_vv (727x)
         .      }
     8,316      z.data.truncate(n);
 2,070,324  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::truncate (2,772x)
     8,316  }
         .  
         .  #[inline]
   567,936  fn add_mul_vvw(z: &mut [BigDigit], x: &[BigDigit], y: BigDigit) -> BigDigit {
   378,624      let mut c = 0;
40,538,112      for (zi, xi) in z.iter_mut().zip(x.iter()) {
213,401,664  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/zip.rs:<core::iter::adapters::zip::Zip<A,B> as core::iter::traits::iterator::Iterator>::next (1,799,616x)
24,326,592  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::zip (94,656x)
 8,235,072  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter_mut (94,656x)
 8,235,072  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter (94,656x)
 1,987,776  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (94,656x)
 1,230,528  => ???:0x00000000001360f0 (94,656x)
17,049,600          let (z1, z0) = mul_add_www(*xi, y, *zi);
68,198,400  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::mul_add_www (1,704,960x)
15,344,640          let (c_, zi_) = add_ww(z0, c, 0);
98,015,250  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::add_ww (1,704,960x)
 3,409,920          *zi = zi_;
10,229,760          c = c_ + z1;
         .      }
         .  
         .      c
   283,968  }
         .  
         .  /// The resulting carry c is either 0 or 1.
         .  #[inline]
     5,089  fn sub_vv(z: &mut [BigDigit], x: &[BigDigit], y: &[BigDigit]) -> BigDigit {
     1,454      let mut c = 0;
   455,924      for (i, (xi, yi)) in x.iter().zip(y.iter()).enumerate().take(z.len()) {
 2,977,730  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Take<I> as core::iter::traits::iterator::Iterator>::next (12,503x)
   186,839  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::zip (727x)
   126,498  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::iter (1,454x)
    61,795  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::take (727x)
    55,979  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::enumerate (727x)
    15,267  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (727x)
     9,451  => ???:0x00000000001360f0 (727x)
     5,816  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs:core::slice::<impl [T]>::len (727x)
   141,312          let zi = xi.wrapping_sub(*yi).wrapping_sub(c);
   235,520  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::wrapping_sub (23,552x)
    70,656          z[i] = zi;
         .          // see "Hacker's Delight", section 2-12 (overflow detection)
   164,864          c = ((yi & !xi) | ((yi | !xi) & zi)) >> (big_digit::BITS - 1)
   329,728  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/internal_macros.rs:<&u64 as core::ops::bit::Not>::not (23,552x)
   188,416  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/internal_macros.rs:<&u64 as core::ops::bit::BitAnd<u64>>::bitand (11,776x)
   188,416  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/internal_macros.rs:<&u64 as core::ops::bit::BitOr<u64>>::bitor (11,776x)
         .      }
         .  
         .      c
     2,181  }
         .  
         .  /// z1<<_W + z0 = x+y+c, with c == 0 or 1
         .  #[inline]
 8,524,800  fn add_ww(x: BigDigit, y: BigDigit, c: BigDigit) -> (BigDigit, BigDigit) {
10,229,760      let yc = y.wrapping_add(c);
17,049,600  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::wrapping_add (1,704,960x)
 5,114,880      let z0 = x.wrapping_add(yc);
17,049,600  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::wrapping_add (1,704,960x)
17,036,300      let z1 = if z0 < x || yc < y { 1 } else { 0 };
         .  
 6,819,840      (z1, z0)
 6,819,840  }
         .  
         .  /// z1 << _W + z0 = x * y + c
         .  #[inline]
 6,819,840  fn mul_add_www(x: BigDigit, y: BigDigit, c: BigDigit) -> (BigDigit, BigDigit) {
42,624,000      let z = x as DoubleBigDigit * y as DoubleBigDigit + c as DoubleBigDigit;
 5,114,880      ((z >> big_digit::BITS) as BigDigit, z as BigDigit)
 6,819,840  }
         .  
         .  /// Calculates x ** y mod m using a fixed, 4-bit window.
        32  pub fn monty_modpow(x: &BigUint, y: &BigUint, m: &BigUint) -> BigUint {
        96      assert!(m.data[0] & 1 == 1);
       656  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (4x)
        16      let mr = MontyReducer::new(m);
     3,508  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::MontyReducer::new (4x)
        16      let num_words = m.data.len();
       292  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (4x)
         .  
        12      let mut x = x.clone();
    50,972  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as core::clone::Clone>::clone (4x)
         .  
         .      // We want the lengths of x and m to be equal.
         .      // It is OK if x >= m as long as len(x) == len(m).
        34      if x.data.len() > num_words {
       292  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (4x)
         4          x %= m;
   979,437  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as core::ops::arith::RemAssign<&num_bigint_dig::biguint::BigUint>>::rem_assign (2x)
         .          // Note: now len(x) <= numWords, not guaranteed ==.
         .      }
        32      if x.data.len() < num_words {
       292  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (4x)
         .          x.data.resize(num_words, 0);
         .      }
         .  
         .      // rr = 2**(2*_W*len(m)) mod m
         8      let mut rr = BigUint::one();
    10,392  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::One>::one (4x)
       168      rr = (rr.shl(2 * num_words * big_digit::BITS)) % m;
 3,581,164  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/macros.rs:<num_bigint_dig::biguint::BigUint as core::ops::arith::Rem<&num_bigint_dig::biguint::BigUint>>::rem (4x)
    38,078  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as core::ops::bit::Shl<usize>>::shl (4x)
        52  => ???:0x00000000001360f0 (4x)
        32      if rr.data.len() < num_words {
       292  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (4x)
         .          rr.data.resize(num_words, 0);
         .      }
         .      // one = 1, with equal length to that of m
         8      let mut one = BigUint::one();
    10,392  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::One>::one (4x)
        28      one.data.resize(num_words, 0);
    18,264  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::resize (4x)
         .  
         4      let n = 4;
         .      // powers[i] contains x^i
        20      let mut powers = Vec::with_capacity(1 << n);
     4,785  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:alloc::vec::Vec<T>::with_capacity (4x)
         .  
         8      let mut v1 = BigUint::zero();
     4,484  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::Zero>::zero (4x)
        36      montgomery(&mut v1, &one, &rr, m, mr.n0inv, num_words);
 1,711,732  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::montgomery (4x)
        48      powers.push(v1);
       524  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:alloc::vec::Vec<T>::push (4x)
         8      let mut v2 = BigUint::zero();
     4,484  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::Zero>::zero (4x)
        36      montgomery(&mut v2, &x, &rr, m, mr.n0inv, num_words);
 1,709,438  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::montgomery (4x)
        48      powers.push(v2);
       524  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:alloc::vec::Vec<T>::push (4x)
     1,276      for i in 2..1 << n {
    10,872  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/range.rs:core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next (60x)
        28  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (4x)
       112          let mut r = BigUint::zero();
    62,776  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::Zero>::zero (56x)
     1,288          montgomery(&mut r, &powers[i - 1], &powers[1], m, mr.n0inv, num_words);
24,006,689  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::montgomery (56x)
    14,560  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:<alloc::vec::Vec<T> as core::ops::index::Index<I>>::index (112x)
       672          powers.push(r);
     7,336  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:alloc::vec::Vec<T>::push (56x)
        56      }
         .  
         .      // initialize z = 1 (Montgomery 1)
        40      let mut z = powers[0].clone();
    39,876  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as core::clone::Clone>::clone (4x)
       520  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:<alloc::vec::Vec<T> as core::ops::index::Index<I>>::index (4x)
        28      z.data.resize(num_words, 0);
       740  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::resize (4x)
         8      let mut zz = BigUint::zero();
     4,484  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::Zero>::zero (4x)
        28      zz.data.resize(num_words, 0);
    18,970  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::resize (4x)
         .  
         .      // same windowed exponent, but with Montgomery multiplications
       794      for i in (0..y.data.len()).rev() {
       300  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (4x)
     7,092  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs:<core::iter::adapters::Rev<I> as core::iter::traits::iterator::Iterator>::next (38x)
        76  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::rev (4x)
        28  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs:<I as core::iter::traits::collect::IntoIterator>::into_iter (4x)
       340          let mut yi = y.data[i];
     5,584  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::Index<I>>::index (34x)
        34          let mut j = 0;
     1,700          while j < big_digit::BITS {
     9,448              if i != y.data.len() - 1 || j != 0 {
    39,840  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:smallvec::SmallVec<A>::len (544x)
     3,780                  montgomery(&mut zz, &z, &z, m, mr.n0inv, num_words);
118,526,590  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::montgomery (540x)
     1,080                  montgomery(&mut z, &zz, &zz, m, mr.n0inv, num_words);
118,518,961  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::montgomery (540x)
     3,780                  montgomery(&mut zz, &z, &z, m, mr.n0inv, num_words);
118,415,737  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::montgomery (540x)
     1,080                  montgomery(&mut z, &zz, &zz, m, mr.n0inv, num_words);
118,478,146  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::montgomery (540x)
         .              }
     1,088              montgomery(
119,814,655  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::montgomery (544x)
         .                  &mut zz,
         .                  &z,
    15,232                  &powers[(yi >> (big_digit::BITS - n)) as usize],
    70,720  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs:<alloc::vec::Vec<T> as core::ops::index::Index<I>>::index (544x)
         .                  m,
         .                  mr.n0inv,
         .                  num_words,
         .              );
     2,720              core::mem::swap(&mut z, &mut zz);
   195,296  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/mem/mod.rs:core::mem::swap (544x)
     2,176              yi <<= n;
     3,808              j += n;
         .          }
         .      }
         .  
         .      // convert to regular number
         8      montgomery(&mut zz, &z, &one, m, mr.n0inv, num_words);
 1,711,754  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs:num_bigint_dig::biguint::monty::montgomery (4x)
         .  
         8      zz.normalize();
       588  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::normalize (4x)
         .      // One last reduction, just in case.
         .      // See golang.org/issue/13907.
        52      if &zz >= m {
     5,420  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/cmp.rs:core::cmp::impls::<impl core::cmp::PartialOrd<&B> for &A>::ge (4x)
         .          // Common case is m has high bit set; in that case,
         .          // since zz is the same length as m, there can be just
         .          // one multiple of m to remove. Just subtract.
         .          // We think that the subtract should be sufficient in general,
         .          // so do that unconditionally, but double-check,
         .          // in case our beliefs are wrong.
         .          // The div is not expected to be reached.
         .          zz -= m;
         .          if &zz >= m {
         .              zz %= m;
         .          }
         .      }
         .  
         8      zz.normalize();
       588  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::normalize (4x)
         .      zz
        96  }
    47,792  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (20x)

26,402,237  <counts for unidentified lines in /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/monty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/gcd.rs
--------------------------------------------------------------------------------
Ir     

-- line 231 ----------------------------------------
     .      a.sign = Plus;
     .  
     .      (a, ua, y)
     .  }
     .  
     .  /// Uses the lehemer algorithm.
     .  /// Based on https://github.com/golang/go/blob/master/src/math/big/int.go#L612
     .  /// If `extended` is set, the Bezout coefficients are calculated, otherwise they are `None`.
    10  pub fn extended_gcd(
     .      a_in: Cow<BigUint>,
     .      b_in: Cow<BigUint>,
     .      extended: bool,
     .  ) -> (BigInt, Option<BigInt>, Option<BigInt>) {
    42      if a_in.is_zero() && b_in.is_zero() {
   188  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::Zero>::is_zero (2x)
    48  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/borrow.rs:<alloc::borrow::Cow<B> as core::ops::deref::Deref>::deref (2x)
     .          if extended {
     .              return (b_in.to_bigint().unwrap(), Some(0.into()), Some(0.into()));
     .          } else {
     .              return (b_in.to_bigint().unwrap(), None, None);
     .          }
     .      }
     .  
    22      if a_in.is_zero() {
   188  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::Zero>::is_zero (2x)
    48  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/borrow.rs:<alloc::borrow::Cow<B> as core::ops::deref::Deref>::deref (2x)
     .          if extended {
     .              return (b_in.to_bigint().unwrap(), Some(0.into()), Some(1.into()));
     .          } else {
     .              return (b_in.to_bigint().unwrap(), None, None);
     .          }
     .      }
     .  
    22      if b_in.is_zero() {
   188  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:<num_bigint_dig::biguint::BigUint as num_traits::identities::Zero>::is_zero (2x)
    28  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/borrow.rs:<alloc::borrow::Cow<B> as core::ops::deref::Deref>::deref (2x)
     .          if extended {
     .              return (a_in.to_bigint().unwrap(), Some(1.into()), Some(0.into()));
     .          } else {
     .              return (a_in.to_bigint().unwrap(), None, None);
     .          }
     .      }
     .  
    26      let a_in = a_in.to_bigint().unwrap();
14,532  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::biguint::BigUint as num_bigint_dig::bigint::ToBigInt>::to_bigint (2x)
    72  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::unwrap (2x)
    48  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/borrow.rs:<alloc::borrow::Cow<B> as core::ops::deref::Deref>::deref (2x)
    26      let b_in = b_in.to_bigint().unwrap();
14,532  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::biguint::BigUint as num_bigint_dig::bigint::ToBigInt>::to_bigint (2x)
    72  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::unwrap (2x)
    28  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/borrow.rs:<alloc::borrow::Cow<B> as core::ops::deref::Deref>::deref (2x)
     .  
    10      let mut a = a_in.clone();
14,312  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as core::clone::Clone>::clone (2x)
     4      let mut b = b_in.clone();
14,477  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as core::clone::Clone>::clone (2x)
     .  
     .      // `ua` (`ub`) tracks how many times input `a_in` has beeen accumulated into `a` (`b`).
    30      let mut ua = if extended { Some(1.into()) } else { None };
 1,344  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/convert/mod.rs:<T as core::convert::Into<U>>::into (2x)
    26  => ???:0x00000000001360f0 (2x)
    28      let mut ub = if extended { Some(0.into()) } else { None };
 6,042  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/convert/mod.rs:<T as core::convert::Into<U>>::into (2x)
    26  => ???:0x00000000001360f0 (2x)
     .  
     .      // Ensure that a >= b
    20      if a < b {
 2,910  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/cmp.rs:core::cmp::PartialOrd::lt (2x)
     .          core::mem::swap(&mut a, &mut b);
     .          core::mem::swap(&mut ua, &mut ub);
     .      }
     .  
    10      let mut q: BigInt = 0.into();
 6,042  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/convert/mod.rs:<T as core::convert::Into<U>>::into (2x)
    10      let mut r: BigInt = 0.into();
 6,042  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/convert/mod.rs:<T as core::convert::Into<U>>::into (2x)
    10      let mut s: BigInt = 0.into();
 6,042  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/convert/mod.rs:<T as core::convert::Into<U>>::into (2x)
    10      let mut t: BigInt = 0.into();
 6,042  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/convert/mod.rs:<T as core::convert::Into<U>>::into (2x)
     .  
   408      while b.len() > 1 {
 5,956  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::len (68x)
     .          // Attempt to calculate in single-precision using leading words of a and b.
   924          let (u0, u1, v0, v1, even) = lehmer_simulate(&a, &b);
205,890  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/gcd.rs:num_bigint_dig::algorithms::gcd::lehmer_simulate (66x)
     .  
     .          // multiprecision step
   528          if v0 != 0 {
     .              // Simulate the effect of the single-precision steps using cosequences.
     .              // a = u0 * a + v0 * b
     .              // b = u1 * a + v1 * b
 1,320              lehmer_update(
3,686,252  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/gcd.rs:num_bigint_dig::algorithms::gcd::lehmer_update (66x)
     .                  &mut a, &mut b, &mut q, &mut r, &mut s, &mut t, u0, u1, v0, v1, even,
     .              );
     .  
   198              if extended {
     .                  // ua = u0 * ua + v0 * ub
     .                  // ub = u1 * ua + v1 * ub
 1,320                  lehmer_update(
3,143,608  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/gcd.rs:num_bigint_dig::algorithms::gcd::lehmer_update (66x)
   726                      ua.as_mut().unwrap(),
 1,122  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::as_mut (66x)
   990  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::unwrap (66x)
   726                      ub.as_mut().unwrap(),
 1,122  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::as_mut (66x)
   990  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::unwrap (66x)
     .                      &mut q,
     .                      &mut r,
     .                      &mut s,
     .                      &mut t,
     .                      u0,
     .                      u1,
     .                      v0,
     .                      v1,
-- line 315 ----------------------------------------
-- line 319 ----------------------------------------
     .          } else {
     .              // Single-digit calculations failed to simulate any quotients.
     .              euclid_udpate(
     .                  &mut a, &mut b, &mut ua, &mut ub, &mut q, &mut r, &mut s, &mut t, extended,
     .              );
     .          }
     .      }
     .  
    12      if b.len() > 0 {
   182  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::len (2x)
     .          // base case if b is a single digit
    12          if a.len() > 1 {
   182  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::len (2x)
     .              // a is longer than a single word, so one update is needed
    32              euclid_udpate(
86,755  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/gcd.rs:num_bigint_dig::algorithms::gcd::euclid_udpate (2x)
     .                  &mut a, &mut b, &mut ua, &mut ub, &mut q, &mut r, &mut s, &mut t, extended,
     .              );
     .          }
     .  
    10          if b.len() > 0 {
   182  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::len (2x)
     .              // a and b are both single word
    22              let mut a_word = a.digits()[0];
   256  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::digits (2x)
    22              let mut b_word = b.digits()[0];
   256  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::digits (2x)
     .  
     6              if extended {
     2                  let mut ua_word: BigDigit = 1;
     2                  let mut ub_word: BigDigit = 0;
     2                  let mut va: BigDigit = 0;
     2                  let mut vb: BigDigit = 1;
     2                  let mut even = true;
     .  
   214                  while b_word != 0 {
   910                      let q = a_word / b_word;
 1,050                      let r = a_word % b_word;
   140                      a_word = b_word;
    70                      b_word = r;
     .  
   840                      let k = ua_word.wrapping_add(q.wrapping_mul(ub_word));
   700  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::wrapping_mul (70x)
   700  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::wrapping_add (70x)
   140                      ua_word = ub_word;
    70                      ub_word = k;
     .  
   840                      let k = va.wrapping_add(q.wrapping_mul(vb));
   700  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::wrapping_add (70x)
   700  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::wrapping_mul (70x)
   140                      va = vb;
    70                      vb = k;
   280                      even = !even;
     .                  }
     .  
    10                  t.data.set_digit(ua_word);
 2,034  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::set_digit (2x)
    10                  s.data.set_digit(va);
 2,112  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::set_digit (2x)
    12                  t.sign = if even { Plus } else { Minus };
    12                  s.sign = if even { Minus } else { Plus };
     .  
    30                  if let Some(ua) = ua.as_mut() {
    34  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::as_mut (2x)
     8                      t *= &*ua;
17,684  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as core::ops::arith::MulAssign<&num_bigint_dig::bigint::BigInt>>::mul_assign (2x)
    34                      s *= ub.unwrap();
19,448  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/macros.rs:<num_bigint_dig::bigint::BigInt as core::ops::arith::MulAssign>::mul_assign (2x)
    72  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::unwrap (2x)
     .  
    22                      *ua = &t + &s;
24,248  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<&num_bigint_dig::bigint::BigInt as core::ops::arith::Add<&num_bigint_dig::bigint::BigInt>>::add (2x)
 1,102  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (2x)
    26  => ???:0x00000000001360f0 (2x)
     .                  }
     .              } else {
     .                  while b_word != 0 {
     .                      let quotient = a_word % b_word;
     .                      a_word = b_word;
     .                      b_word = quotient;
     .                  }
     .              }
    30              a.digits_mut()[0] = a_word;
   336  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.4.0/lib.rs:<smallvec::SmallVec<A> as core::ops::index::IndexMut<I>>::index_mut (2x)
    24  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::digits_mut (2x)
     .          }
     .      }
     .  
     4      a.normalize();
   532  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::normalize (2x)
     .  
    20      let y = if let Some(ref ua) = ua {
     .          // y = (z - a * x) / b
    26          Some((&a - (&a_in * ua)) / &b_in)
1,000,213  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/macros.rs:<num_bigint_dig::bigint::BigInt as core::ops::arith::Div<&num_bigint_dig::bigint::BigInt>>::div (2x)
167,872  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<&num_bigint_dig::bigint::BigInt as core::ops::arith::Mul<&num_bigint_dig::bigint::BigInt>>::mul (2x)
 6,088  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<&num_bigint_dig::bigint::BigInt as core::ops::arith::Sub<num_bigint_dig::bigint::BigInt>>::sub (2x)
    26  => ???:0x00000000001360f0 (2x)
     .      } else {
     .          None
     .      };
     .  
   102      (a, ua, y)
    82  }
 7,137  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (18x)
     .  
     .  /// Attempts to simulate several Euclidean update steps using leading digits of `a` and `b`.
     .  /// It returns `u0`, `u1`, `v0`, `v1` such that `a` and `b` can be updated as:
     .  ///     a = u0 * a + v0 * b
     .  ///     b = u1 * a + v1 * b
     .  ///
     .  /// Requirements: `a >= b` and `b.len() > 2`.
     .  /// Since we are calculating with full words to avoid overflow, `even` (the returned bool)
     .  /// is used to track the sign of cosequences.
     .  /// For even iterations: `u0, v1 >= 0 && u1, v0 <= 0`
     .  /// For odd iterations: `u0, v1 <= && u1, v0 >= 0`
     .  #[inline]
   330  fn lehmer_simulate(a: &BigInt, b: &BigInt) -> (BigDigit, BigDigit, BigDigit, BigDigit, bool) {
     .      // m >= 2
   462      let m = b.len();
 5,774  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::len (66x)
     .      // n >= m >= 2
   198      let n = a.len();
 5,774  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::len (66x)
     .  
     .      // println!("a len is {:?}", a.len());
     .      // println!("b len is {:?}", b.len());
     .  
     .      // debug_assert!(m >= 2);
     .      // debug_assert!(n >= m);
     .  
     .      // extract the top word of bits from a and b
 1,056      let h = a.digits()[n - 1].leading_zeros();
 8,216  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::digits (66x)
   924  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::leading_zeros (66x)
     .  
 1,980      let mut a1: BigDigit = a.digits()[n - 1] << h
 8,216  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::digits (66x)
 2,772          | ((a.digits()[n - 2] as DoubleBigDigit) >> (BITS as u32 - h)) as BigDigit;
 8,216  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::digits (66x)
     .  
     .      // b may have implicit zero words in the high bits if the lengths differ
   198      let mut a2: BigDigit = if n == m {
 1,736          b.digits()[n - 1] << h
 7,720  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::digits (62x)
 2,604              | ((b.digits()[n - 2] as DoubleBigDigit) >> (BITS as u32 - h)) as BigDigit
 7,720  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::digits (62x)
    32      } else if n == m + 1 {
   172          ((b.digits()[n - 2] as DoubleBigDigit) >> (BITS as u32 - h)) as BigDigit
   496  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_bigint_dig::biguint::IntDigits>::digits (4x)
     .      } else {
     .          0
     .      };
     .  
     .      // odd, even tracking
    66      let mut even = false;
     .  
    66      let mut u0 = 0;
    66      let mut u1 = 1;
    66      let mut u2 = 0;
     .  
    66      let mut v0 = 0;
    66      let mut v1 = 0;
    66      let mut v2 = 1;
     .  
     .      // Calculate the quotient and cosequences using Collins' stoppting condition.
25,882      while a2 >= v2 && a1.wrapping_sub(a2) >= v1 + v2 {
12,080  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs:core::num::<impl u64>::wrapping_sub (1,208x)
15,574          let q = a1 / a2;
16,772          let r = a1 % a2;
     .  
 2,396          a1 = a2;
 1,198          a2 = r;
     .  
17,970          let k = u1 + q * u2;
 2,396          u0 = u1;
 2,396          u1 = u2;
 1,198          u2 = k;
     .  
16,772          let k = v1 + q * v2;
 2,396          v0 = v1;
 2,396          v1 = v2;
 1,198          v2 = k;
     .  
 4,792          even = !even;
     .      }
     .  
   858      (u0, u1, v0, v1, even)
   132  }
     .  
 2,508  fn lehmer_update(
     .      a: &mut BigInt,
     .      b: &mut BigInt,
     .      q: &mut BigInt,
     .      r: &mut BigInt,
     .      s: &mut BigInt,
     .      t: &mut BigInt,
     .      u0: BigDigit,
     .      u1: BigDigit,
     .      v0: BigDigit,
     .      v1: BigDigit,
     .      even: bool,
     .  ) {
 1,980      t.data.set_digit(u0);
102,706  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::set_digit (132x)
   396      s.data.set_digit(v0);
103,576  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::set_digit (132x)
   408      if even {
   120          t.sign = Plus;
    60          s.sign = Minus
     .      } else {
   144          t.sign = Minus;
    72          s.sign = Plus;
     .      }
     .  
   132      *t *= &*a;
958,632  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as core::ops::arith::MulAssign<&num_bigint_dig::bigint::BigInt>>::mul_assign (132x)
   132      *s *= &*b;
954,453  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as core::ops::arith::MulAssign<&num_bigint_dig::bigint::BigInt>>::mul_assign (132x)
     .  
   396      r.data.set_digit(u1);
102,784  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::set_digit (132x)
   396      q.data.set_digit(v1);
103,732  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/biguint.rs:num_bigint_dig::biguint::BigUint::set_digit (132x)
   408      if even {
   120          q.sign = Plus;
    60          r.sign = Minus
     .      } else {
   144          q.sign = Minus;
    72          r.sign = Plus;
     .      }
     .  
   132      *r *= &*a;
956,824  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as core::ops::arith::MulAssign<&num_bigint_dig::bigint::BigInt>>::mul_assign (132x)
   132      *q *= &*b;
959,014  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as core::ops::arith::MulAssign<&num_bigint_dig::bigint::BigInt>>::mul_assign (132x)
     .  
 1,716      *a = t + s;
1,220,075  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<&mut num_bigint_dig::bigint::BigInt as core::ops::arith::Add<&mut num_bigint_dig::bigint::BigInt>>::add (132x)
61,194  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (132x)
 1,716  => ???:0x00000000001360f0 (132x)
 1,848      *b = r + q;
1,227,878  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<&mut num_bigint_dig::bigint::BigInt as core::ops::arith::Add<&mut num_bigint_dig::bigint::BigInt>>::add (132x)
61,148  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (132x)
 1,716  => ???:0x00000000001360f0 (132x)
   792  }
     .  
    32  fn euclid_udpate(
     .      a: &mut BigInt,
     .      b: &mut BigInt,
     .      ua: &mut Option<BigInt>,
     .      ub: &mut Option<BigInt>,
     .      q: &mut BigInt,
     .      r: &mut BigInt,
     .      s: &mut BigInt,
     .      t: &mut BigInt,
     .      extended: bool,
     .  ) {
    74      let (q_new, r_new) = a.div_rem(b);
10,128  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as num_integer::Integer>::div_rem (2x)
    44      *q = q_new;
 1,207  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (2x)
    44      *r = r_new;
 1,228  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (2x)
     .  
    10      core::mem::swap(a, b);
   718  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/mem/mod.rs:core::mem::swap (2x)
    10      core::mem::swap(b, r);
   718  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/mem/mod.rs:core::mem::swap (2x)
     .  
     6      if extended {
     .          // ua, ub = ub, ua - q * ub
    28          if let Some(ub) = ub.as_mut() {
    34  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::as_mut (2x)
    36              if let Some(ua) = ua.as_mut() {
    34  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs:core::option::Option<T>::as_mut (2x)
    36                  *t = ub.clone();
13,608  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as core::clone::Clone>::clone (2x)
 1,186  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (2x)
    34                  *s = &*ub * &*q;
16,683  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<&num_bigint_dig::bigint::BigInt as core::ops::arith::Mul<&num_bigint_dig::bigint::BigInt>>::mul (2x)
 1,207  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (2x)
    36                  *ub = &*ua - &*s;
23,832  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<&num_bigint_dig::bigint::BigInt as core::ops::arith::Sub<&num_bigint_dig::bigint::BigInt>>::sub (2x)
 1,048  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (2x)
    22                  *ua = t.clone();
13,608  => /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/bigint.rs:<num_bigint_dig::bigint::BigInt as core::clone::Clone>::clone (2x)
 1,048  => /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs:core::ptr::drop_in_place (2x)
    26  => ???:0x00000000001360f0 (2x)
     .              }
     .          }
     .      }
    14  }
     .  
     .  #[cfg(test)]
     .  mod tests {
     .      use super::*;
     .      use core::str::FromStr;
     .  
     .      use num_traits::FromPrimitive;
     .  
-- line 552 ----------------------------------------

17,822  <counts for unidentified lines in /home/cardinal/.cargo/registry/src/github.com-1ecc6299db9ec823/num-bigint-dig-0.6.0/src/algorithms/gcd.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  /build/glibc-YYA7BZ/glibc-2.31/elf/../sysdeps/x86_64/dl-machine.h
  /build/glibc-YYA7BZ/glibc-2.31/elf/dl-addr.c
  /build/glibc-YYA7BZ/glibc-2.31/elf/dl-lookup.c
  /build/glibc-YYA7BZ/glibc-2.31/malloc/malloc.c
  /build/glibc-YYA7BZ/glibc-2.31/stdio-common/vfscanf-internal.c
  /build/glibc-YYA7BZ/glibc-2.31/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  /build/glibc-YYA7BZ/glibc-2.31/string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  /cargo/registry/src/github.com-1ecc6299db9ec823/compiler_builtins-0.1.31/src/int/udiv.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/raw_vec.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/liballoc/vec.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/alloc/layout.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/clone.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/cmp.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/internal_macros.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/intrinsics.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/mod.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/adapters/zip.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/range.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/sources.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/collect.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/double_ended.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/iter/traits/iterator.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/macros/mod.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/mem/mod.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/num/mod.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/arith.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/bit.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ops/function.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/option.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/const_ptr.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mod.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/mut_ptr.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/ptr/non_null.rs
  /rustc/c367798cfd3817ca6ae908ce675d1d99242af148/src/libcore/slice/mod.rs

--------------------------------------------------------------------------------
Ir          
--------------------------------------------------------------------------------
258,235,266  events annotated

